import os
import re
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# –¢–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_data = {}

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 01.01.2026)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 01.01.2026)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 01.01.2026)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 01.01.2026)"
}

PROMO_TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (0–≥—Ä–Ω/6–º—ñ—Å.)"
}

def is_valid_name(name: str) -> bool:
    words = name.strip().split()
    if len(words) != 3:
        return False
    # –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ: –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ + —Å—Ç—Ä–æ—á–Ω—ã–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤
    pattern = re.compile(r"^[–ê-–Ø–Ü–á–Ñ“ê][–∞-—è—ñ—ó—î“ë]+$")
    return all(pattern.match(w) for w in words)

def is_valid_address(address: str) -> bool:
    return len(address.strip()) >= 10

def is_valid_phone(phone: str) -> bool:
    return re.fullmatch(r"380\d{9}", phone) is not None

async def delete_user_messages(chat_id: int):
    if chat_id in user_data:
        for msg_id in user_data[chat_id].get("messages", []):
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        user_data[chat_id]["messages"] = []

async def save_message(chat_id: int, message: types.Message):
    if chat_id not in user_data:
        user_data[chat_id] = {"messages": [], "step": None}
    user_data[chat_id]["messages"].append(message.message_id)

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ü—Ä–æ–º–æ-–∫–æ–¥")
    kb.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    return kb

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = {"messages": [], "step": None}
    await delete_user_messages(chat_id)
    await save_message(chat_id, message)

    welcome_text = (
        "üëã –í—ñ—Ç–∞—î–º–æ —É Vodafone üá∫üá¶\n\n"
        "üí™ –ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏:\n"
        "‚úÖ –ù–æ–≤–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞\n"
        "‚úÖ –°—É—á–∞—Å–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è GPON\n"
        "‚úÖ –®–≤–∏–¥–∫—ñ—Å—Ç—å –¥–æ 1–ì—ñ–≥–∞–±—ñ—Ç/—Å–µ–∫\n"
        "‚úÖ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n"
        "‚úÖ –ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ —Ä–æ–±–æ—Ç–∏ –±–µ–∑ —Å–≤—ñ—Ç–ª–∞\n"
        "‚úÖ –ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá"
    )
    msg = await message.answer(welcome_text, reply_markup=main_menu())
    await save_message(chat_id, msg)

@dp.message_handler(lambda m: m.text in ["–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ü—Ä–æ–º–æ-–∫–æ–¥", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é"])
async def menu_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text
    await delete_user_messages(chat_id)
    await save_message(chat_id, message)
    user_data[chat_id]["promo"] = False

    if text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è":
        user_data[chat_id]["step"] = "get_name"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
        await save_message(chat_id, msg)

    elif text == "–ü—Ä–æ–º–æ-–∫–æ–¥":
        user_data[chat_id]["step"] = "get_promo"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥:", reply_markup=types.ReplyKeyboardRemove())
        await save_message(chat_id, msg)

    elif text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è":
        url = "https://www.google.com/maps/d/u/0/viewer?mid=1T0wyMmx7jf99vNKMX9qBkqxPnefPbnY&ll=50.45869537257289%2C30.529932392320312&z=11"
        msg = await message.answer(f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–∫—Ä–∏—Ç—Ç—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{url}")
        await save_message(chat_id, msg)
        msg2 = await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
        await save_message(chat_id, msg2)
        user_data[chat_id]["step"] = None

    elif text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é":
        user_data[chat_id]["step"] = "consult_name"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
        await save_message(chat_id, msg)

@dp.message_handler()
async def general_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    step = user_data.get(chat_id, {}).get("step")

    await save_message(chat_id, message)

    if step == "get_promo":
        if text.lower() == "vdmkie":
            user_data[chat_id]["promo"] = True
            user_data[chat_id]["step"] = "get_name"
            msg = await message.answer("–ü—Ä–æ–º–æ-–∫–æ–¥ –ø—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á)")
            await save_message(chat_id, msg)
        else:
            msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–º–æ-–∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É.")
            await save_message(chat_id, msg)

    elif step == "get_name" or step == "consult_name":
        if not is_valid_name(text):
            msg = await message.answer("–ü–æ–º–∏–ª–∫–∞! –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á).")
            await save_message(chat_id, msg)
            return

        user_data[chat_id]["name"] = text

        if step == "consult_name":
            # –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
            await bot.send_message(CHAT_ID,
                f"–ó–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:\n–ü–Ü–ë: {text}\n–¢–µ–ª–µ–≥—Ä–∞–º ID: {chat_id}"
            )
            msg = await message.answer("–î—è–∫—É—î–º–æ! –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=main_menu())
            await save_message(chat_id, msg)
            user_data[chat_id]["step"] = None
            return

        user_data[chat_id]["step"] = "get_address"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É —É —Ñ–æ—Ä–º–∞—Ç—ñ (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
        await save_message(chat_id, msg)

    elif step == "get_address":
        if not is_valid_address(text):
            msg = await message.answer("–ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            await save_message(chat_id, msg)
            return
        user_data[chat_id]["address"] = text
        user_data[chat_id]["step"] = "get_phone"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX (–±–µ–∑ +):")
        await save_message(chat_id, msg)

    elif step == "get_phone":
        if not is_valid_phone(text):
            msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX (–±–µ–∑ +):")
            await save_message(chat_id, msg)
            return
        user_data[chat_id]["phone"] = text

        tariffs = PROMO_TARIFFS if user_data[chat_id].get("promo") else TARIFFS
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for key in tariffs.keys():
            kb.add(key)
        user_data[chat_id]["step"] = "get_tariff"
        msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)
        await save_message(chat_id, msg)

    elif step == "get_tariff":
        tariffs = PROMO_TARIFFS if user_data[chat_id].get("promo") else TARIFFS
        if text not in tariffs:
            msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö.")
            await save_message(chat_id, msg)
            return

        user_data[chat_id]["tariff"] = tariffs[text]

        order_text = (
            f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è - –∞–≤—Ç–æ—Ä –í–∞–¥–∏–º –†–æ–≥–∞–ª—å–æ–≤:\n"
            f"–ü–Ü–ë: {user_data[chat_id]['name']}\n"
            f"–ê–¥—Ä–µ—Å–∞: {user_data[chat_id]['address']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data[chat_id]['phone']}\n"
            f"–¢–∞—Ä–∏—Ñ: {user_data[chat_id]['tariff']}"
        )
        await bot.send_message(CHAT_ID, order_text)

        await delete_user_messages(chat_id)
        msg = await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞! –°–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä.", reply_markup=main_menu())
        await save_message(chat_id, msg)
        user_data[chat_id]["step"] = None
        user_data[chat_id]["promo"] = False

    elif text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç–∏":
        await delete_user_messages(chat_id)
        msg = await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
        await save_message(chat_id, msg)
        user_data[chat_id]["step"] = None

    else:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        await save_message(chat_id, msg)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
