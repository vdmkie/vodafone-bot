import os
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 125–≥–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)"
}

PROMO_TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (0–≥—Ä–Ω/6–º—ñ—Å.)"
}

def is_valid_name(name):
    return bool(re.match(r"^[–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë]+\s[–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë]+\s[–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë]+$", name.strip()))

def is_valid_address(address):
    return bool(re.search(r"[–∞-—è–ê-–Ø—ñ—ó–Ü–á–Ñ—î“ê“ë]+\s.+\d+", address.strip()))

def is_valid_phone(phone):
    return bool(re.match(r"^380\d{9}$", phone.strip()))

async def add_message(chat_id, message):
    if chat_id not in user_data:
        user_data[chat_id] = {"messages": [], "step": None}
    user_data[chat_id]["messages"].append(message.message_id)

async def delete_all_messages(chat_id):
    if chat_id in user_data:
        for msg_id in user_data[chat_id].get("messages", []):
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        user_data[chat_id]["messages"] = []

def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
    markup.add("–ü—Ä–æ–º–æ-–∫–æ–¥")
    return markup

def get_finish_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
    return markup

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id] = {"messages": [], "step": None}

    photo_url = "https://github.com/vdmkie/vodafone-bot/blob/main/%D0%B0%D0%BA%D1%86%D0%B8%D1%8F.png?raw=true"
    photo = await bot.send_photo(chat_id, photo_url)
    await add_message(chat_id, photo)

    msg = await message.answer(
        "üëã *–í—ñ—Ç–∞—î–º–æ —É Vodafone üá∫üá¶*\n\n"
        "üí™  *–ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ —Ü–µ...*\n"
        "‚úÖ *–ù–æ–≤–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞!*\n"
        "‚úÖ *C—É—á–∞—Å–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è GPON!*\n"
        "‚úÖ *–®–≤–∏–¥–∫—ñ—Å—Ç—å –¥–æ 1–ì—ñ–≥–∞–±—ñ—Ç/—Å–µ–∫.!*\n"
        "‚úÖ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!*\n"
        "‚úÖ *–ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Å–≤—ñ—Ç–ª–∞!*\n"
        "‚úÖ *–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏!*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞ –¥–æ 01.01.2026, –¥–∞–ª—ñ 250 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Start - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 300 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 325 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Max - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 375 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    await add_message(chat_id, msg)
    await add_message(chat_id, message)

@dp.message_handler(lambda message: message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
async def order_connection(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id]["step"] = "get_name"
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –ü–Ü–ë (—Ç—Ä–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª):")
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "get_name")
async def process_name(message: types.Message):
    chat_id = message.chat.id
    name = message.text.strip()
    if not is_valid_name(name):
        msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏:")
        await add_message(chat_id, msg)
        return
    user_data[chat_id]["name"] = name
    user_data[chat_id]["step"] = "get_address"
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à—É –∞–¥—Ä–µ—Å—É (–≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "get_address")
async def process_address(message: types.Message):
    chat_id = message.chat.id
    address = message.text.strip()
    if not is_valid_address(address):
        msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        await add_message(chat_id, msg)
        return
    user_data[chat_id]["address"] = address
    user_data[chat_id]["step"] = "get_phone"
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "get_phone")
async def process_phone(message: types.Message):
    chat_id = message.chat.id
    phone = message.text.strip()
    if not is_valid_phone(phone):
        msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
        await add_message(chat_id, msg)
        return
    user_data[chat_id]["phone"] = phone
    user_data[chat_id]["step"] = "choose_tariff"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for t in TARIFFS.keys():
        markup.add(t)
    markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
    msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "choose_tariff")
async def process_tariff(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        await message.answer("–î—è–∫—É—î–º–æ! –í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=get_main_menu())
        user_data[chat_id]["step"] = None
        await delete_all_messages(chat_id)
        return
    if text not in TARIFFS:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑—ñ —Å–ø–∏—Å–∫—É.")
        await add_message(chat_id, msg)
        return

    user_data[chat_id]["tariff"] = TARIFFS[text]
    await message.answer(f"–î—è–∫—É—î–º–æ! –í–∏ –æ–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {TARIFFS[text]}", reply_markup=get_main_menu())
    user_data[chat_id]["step"] = None
    await delete_all_messages(chat_id)

@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–º–æ-–∫–æ–¥")
async def promo_code(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id]["step"] = "promo_code"
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø—Ä–æ–º–æ-–∫–æ–¥:")
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "promo_code")
async def process_promo_code(message: types.Message):
    chat_id = message.chat.id
    code = message.text.strip()
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ (–º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
    valid_codes = {"PROMO2025": True}
    if code not in valid_codes:
        msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–º–æ-–∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å '–í—ñ–¥–º—ñ–Ω–∞' –¥–ª—è –≤–∏—Ö–æ–¥—É.")
        await add_message(chat_id, msg)
        return
    user_data[chat_id]["step"] = "choose_promo_tariff"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for t in PROMO_TARIFFS.keys():
        markup.add(t)
    markup.add("–í—ñ–¥–º—ñ–Ω–∞")
    msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–º:", reply_markup=markup)
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "choose_promo_tariff")
async def process_promo_tariff(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    if text == "–í—ñ–¥–º—ñ–Ω–∞":
        await message.answer("–í—ñ–¥–º—ñ–Ω–∞. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=get_main_menu())
        user_data[chat_id]["step"] = None
        await delete_all_messages(chat_id)
        return
    if text not in PROMO_TARIFFS:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ '–í—ñ–¥–º—ñ–Ω–∞'.")
        await add_message(chat_id, msg)
        return

    user_data[chat_id]["promo_tariff"] = PROMO_TARIFFS[text]
    await message.answer(f"–î—è–∫—É—î–º–æ! –í–∏ –æ–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ –∑ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–º: {PROMO_TARIFFS[text]}", reply_markup=get_main_menu())
    user_data[chat_id]["step"] = None
    await delete_all_messages(chat_id)

@dp.message_handler(lambda message: message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
async def order_consultation(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id]["step"] = "consultation_name"
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –ü–Ü–ë –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:")
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "consultation_name")
async def process_consultation_name(message: types.Message):
    chat_id = message.chat.id
    name = message.text.strip()
    if not is_valid_name(name):
        msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏:")
        await add_message(chat_id, msg)
        return
    user_data[chat_id]["consult_name"] = name
    user_data[chat_id]["step"] = "consult_phone"
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó (380XXXXXXXXX):")
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "consult_phone")
async def process_consultation_phone(message: types.Message):
    chat_id = message.chat.id
    phone = message.text.strip()
    if not is_valid_phone(phone):
        msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
        await add_message(chat_id, msg)
        return
    user_data[chat_id]["consult_phone"] = phone
    user_data[chat_id]["step"] = None
    await message.answer("–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=get_main_menu())
    await delete_all_messages(chat_id)

@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
async def check_coverage(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    msg = await message.answer("–î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∞–¥—Ä–µ—Å—É:")
    await add_message(chat_id, msg)
    user_data[chat_id]["step"] = "coverage_address"

@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "coverage_address")
async def process_coverage_address(message: types.Message):
    chat_id = message.chat.id
    address = message.text.strip()
    if not is_valid_address(address):
        msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        await add_message(chat_id, msg)
        return
    user_data[chat_id]["step"] = None
    # –¢—É—Ç –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è –ø–æ –∞–¥—Ä–µ—Å—ñ
    await message.answer(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–ª—è –∞–¥—Ä–µ—Å–∏:\n{address}\n–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!", reply_markup=get_main_menu())
    await delete_all_messages(chat_id)

@dp.message_handler(lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
async def finish(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id]["step"] = None
    await message.answer("–î—è–∫—É—î–º–æ! –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /start.", reply_markup=types.ReplyKeyboardRemove())

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
