import os
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞ –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞ –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞ –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 125–≥–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞ –¥–æ 01.01.2026—Ä.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)"
}

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
def is_valid_name(name):
    return bool(re.match(r"^[–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë]+\s[–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë]+\s[–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë]+$", name.strip()))

def is_valid_address(address):
    return bool(re.search(r"[–∞-—è–ê-–Ø—ñ—ó–Ü–á–Ñ—î“ê“ë]+\s.+\d+", address.strip()))

def is_valid_phone(phone):
    return bool(re.match(r"^380\d{9}$", phone.strip()))

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_data[message.chat.id] = {"messages": [], "step": None}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")

    photo = await bot.send_photo(
        message.chat.id,
        "https://github.com/vdmkie/vodafone-bot/blob/main/IMG_20250810_211102.png?raw=true"
    )
    user_data[message.chat.id]["messages"].append(photo.message_id)

    msg = await message.answer(
        "üëã *–í—ñ—Ç–∞—î–º–æ —É Vodafone üá∫üá¶*\n\n"
        "üí™  *–ù–∞—à—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ —Ü–µ...*\n"
        "‚úÖ *–ù–æ–≤–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞!*\n"
        "‚úÖ *C—É—á–∞—Å–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è GPON!*\n"
        "‚úÖ *–®–≤–∏–¥–∫—ñ—Å—Ç—å –¥–æ 1–ì—ñ–≥–∞–±—ñ—Ç/—Å–µ–∫.!*\n"
        "‚úÖ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!*\n"
        "‚úÖ *–ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Å–≤—ñ—Ç–ª–∞!*\n"
        "‚úÖ *–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏!*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞ –¥–æ 01.01.2026, –¥–∞–ª—ñ 250 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Start - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 300 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 325 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Max - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 375 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    user_data[message.chat.id]["messages"].append(msg.message_id)

# --- –ó–∞—è–≤–∫–∞ ---
@dp.message_handler(lambda m: m.text == "–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")
async def request_name(message: types.Message):
    user_data[message.chat.id] = {"step": "waiting_for_name", "messages": []}
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
    user_data[message.chat.id]["messages"].append(msg.message_id)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_name")
async def handle_name(message: types.Message):
    if not is_valid_name(message.text):
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –ü—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á")
        user_data[message.chat.id]["messages"].append(msg.message_id)
        return
    user_data[message.chat.id]["name"] = message.text.strip()
    user_data[message.chat.id]["step"] = "waiting_for_address"
    msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ. –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
    user_data[message.chat.id]["messages"].append(msg.message_id)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_address")
async def handle_address(message: types.Message):
    if not is_valid_address(message.text):
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        user_data[message.chat.id]["messages"].append(msg.message_id)
        return
    user_data[message.chat.id]["address"] = message.text.strip()
    user_data[message.chat.id]["step"] = "waiting_for_phone"
    msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 380...):")
    user_data[message.chat.id]["messages"].append(msg.message_id)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_phone")
async def handle_phone(message: types.Message):
    if not is_valid_phone(message.text):
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        user_data[message.chat.id]["messages"].append(msg.message_id)
        return
    user_data[message.chat.id]["phone"] = message.text.strip()
    user_data[message.chat.id]["step"] = "waiting_for_tariff"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for tariff in TARIFFS:
        markup.add(tariff)
    msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)
    user_data[message.chat.id]["messages"].append(msg.message_id)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_tariff")
async def handle_tariff(message: types.Message):
    if message.text not in TARIFFS:
        msg = await message.answer("‚ùó –û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑—ñ —Å–ø–∏—Å–∫—É.")
        user_data[message.chat.id]["messages"].append(msg.message_id)
        return

    user_data[message.chat.id]["tariff"] = message.text
    text = (
        "üì© –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –†–æ–≥–∞–ª—å–æ–≤ –í–∞–¥–∏–º:\n\n"
        f"üë§ –ü–Ü–ë: {user_data[message.chat.id]['name']}\n"
        f"üè† –ê–¥—Ä–µ—Å–∞: {user_data[message.chat.id]['address']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[message.chat.id]['phone']}\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {TARIFFS[message.text]}"
    )
    await bot.send_message(CHAT_ID, text)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")

    msg = await message.answer("‚úÖ –ó–∞—è–≤–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é.", reply_markup=markup)
    user_data[message.chat.id]["messages"].append(msg.message_id)
    user_data[message.chat.id]["step"] = "completed"

# --- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è ---
@dp.message_handler(lambda m: m.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
async def request_consult_name(message: types.Message):
    user_data[message.chat.id] = {"step": "consult_name", "messages": []}
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
    user_data[message.chat.id]["messages"].append(msg.message_id)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "consult_name")
async def handle_consult_name(message: types.Message):
    if not is_valid_name(message.text):
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –ü—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á")
        user_data[message.chat.id]["messages"].append(msg.message_id)
        return
    user_data[message.chat.id]["name"] = message.text.strip()
    user_data[message.chat.id]["step"] = "consult_phone"
    msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 380...):")
    user_data[message.chat.id]["messages"].append(msg.message_id)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "consult_phone")
async def handle_consult_phone(message: types.Message):
    if not is_valid_phone(message.text):
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        user_data[message.chat.id]["messages"].append(msg.message_id)
        return

    user_data[message.chat.id]["phone"] = message.text.strip()

    text = (
        "üìû –ó–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:\n\n"
        f"üë§ –ü–Ü–ë: {user_data[message.chat.id]['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[message.chat.id]['phone']}"
    )
    await bot.send_message(CHAT_ID, text)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
    msg = await message.answer("‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é.", reply_markup=markup)
    user_data[message.chat.id]["messages"].append(msg.message_id)

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è ---
@dp.message_handler(lambda m: m.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
async def check_coverage(message: types.Message):
    markup_url = types.InlineKeyboardMarkup()
    markup_url.add(
        types.InlineKeyboardButton(
            text="–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É –ø–æ–∫—Ä–∏—Ç—Ç—è üåê",
            url="https://www.google.com/maps/d/u/0/viewer?mid=1T0wyMmx7jf99vNKMX9qBkqxPnefPbnY&ll=50.45869537257289%2C30.529932392320312&z=11"
        )
    )
    markup_finish = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_finish.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")

    msg = await message.answer("üîç –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è:", reply_markup=markup_url)
    user_data[message.chat.id] = {"messages": [msg.message_id], "step": None}

    await message.answer("–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏'", reply_markup=markup_finish)

# --- –ó–∞–≤–µ—Ä—à–∏—Ç–∏ ---
async def reset_user_state(message: types.Message):
    chat_id = message.chat.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for msg_id in user_data.get(chat_id, {}).get("messages", []):
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception:
            pass

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥—É "–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
    try:
        await bot.delete_message(chat_id, message.message_id)
    except Exception:
        pass

    user_data[chat_id] = {}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°—Ç–∞—Ä—Ç"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°—Ç–∞—Ä—Ç")
    await message.answer("üëã –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø–æ—á–∞—Ç–∫—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°—Ç–∞—Ä—Ç' –¥–ª—è –ø–æ—á–∞—Ç–∫—É.", reply_markup=markup)

@dp.message_handler(lambda m: m.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
async def handle_finish(message: types.Message):
    await reset_user_state(message)
    return  # –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è

@dp.message_handler(lambda m: m.text == "–°—Ç–∞—Ä—Ç")
async def handle_start_button(message: types.Message):
    await start(message)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
