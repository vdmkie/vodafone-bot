import os
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -125–≥—Ä–Ω/–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (125–≥—Ä–Ω/–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 125–≥—Ä–Ω/–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (125–≥—Ä–Ω/–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (125–≥—Ä–Ω/–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 125–≥—Ä–Ω/–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (125–≥—Ä–Ω/–º—ñ—Å.)"
}

PROMO_TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -0–≥—Ä–Ω/6–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 0–≥—Ä–Ω/6–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 0–≥—Ä–Ω/6–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 0–≥—Ä–Ω/6–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (0–≥—Ä–Ω/6–º—ñ—Å.)"
}

CITIES_COVERAGE = {
        "–ö–∏—ó–≤": "https://www.google.com/maps/d/u/0/viewer?mid=1T0wyMmx7jf99vNKMX9qBkqxPnefPbnY&ll=50.45869537257287%2C30.529932392320312&z=11",
    "–î–Ω—ñ–ø—Ä–æ": "https://www.google.com/maps/d/u/0/viewer?mid=1JEKUJnE9XUTZPjd-f8jmXPcvLU4s-QhE&hl=uk&ll=48.47923374885031%2C34.92072785000002&z=15",
    "–õ—É—Ü—å–∫": "https://www.google.com/maps/d/u/0/viewer?mid=1drkIR5NswXCAazpv5qmaf02lL9OfJAc&ll=50.75093726790353%2C25.32392972563127&z=12",
    "–ö—Ä–∏–≤–∏–π –†—ñ–≥": "https://www.google.com/maps/d/u/0/viewer?mid=17kqq7EQadI5_o5bK1_lix-Qo2wbBaJY&ll=47.910800696984694%2C33.393370494687424&z=12",
    "–õ—å–≤—ñ–≤": "https://www.google.com/maps/d/u/0/viewer?mid=1CzE-aG4mdBTiu47Oj2u_lDDPDiNdwsAl&hl=uk&ll=49.78563613970314%2C24.064665899999994&z=17",
    "–ú–∏–∫–æ–ª–∞—ó–≤": "https://www.google.com/maps/d/u/0/viewer?mid=17YcaZFCt8EAnQ1oB8Dd-0xdOwLqWuMw&ll=46.97070266941583%2C31.969450300000013&z=13",
    "–û–¥–µ—Å–∞": "https://www.google.com/maps/d/u/0/viewer?mid=1WlFwsqR57hxtJvzWKHHpguYjw-Gvv6QU&ll=46.505228582262816%2C30.643495007229554&z=10",
    "–ü–æ–ª—Ç–∞–≤–∞": "https://www.google.com/maps/d/u/0/viewer?mid=1aGROaTa6OPOTsGvrzAbdiSPUvpZo1cA&ll=49.59354781387412%2C34.536843507594725&z=12",
    "–†—ñ–≤–Ω–µ": "https://www.google.com/maps/d/u/0/viewer?mid=1jqpYGCecy1zFXhfUz5zwTQr7aV4nXlU&ll=50.625776658980726%2C26.243116906868085&z=12",
    "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å": "https://www.google.com/maps/d/u/0/viewer?mid=1nM68n7nP6D1gRpVC3x2E-8wcq83QRDs&ll=49.560202454739375%2C25.59590906296999&z=12",
    "–•–∞—Ä–∫—ñ–≤": "https://www.google.com/maps/d/u/0/viewer?mid=19jXD4BddAs9_HAE4he7rWUUFKGEaNl3v&ll=49.95160510667597%2C36.370054685897266&z=14",
    "–ß–µ—Ä–Ω—ñ–≥—ñ–≤": "https://www.google.com/maps/d/u/0/viewer?mid=1SR9EvlXEcIk3EeIJeJDHAPqlRYyWTvM&ll=51.50050200415294%2C31.283996303050923&z=12",
    "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ": "https://www.google.com/maps/d/u/0/viewer?mid=1aedZnI80ccELyI3FWKY5xJeed9RotXA&ll=48.28432273335117%2C25.924519174020382&z=12"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
def is_valid_name(name):
    return bool(re.match(r"^[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+$", name.strip()))

def is_valid_address(address):
    return len(address.strip()) >= 20

def is_valid_phone(phone):
    return bool(re.match(r"^380\d{9}$", phone.strip()))

# –†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def add_message(chat_id, message):
    if chat_id not in user_data:
        user_data[chat_id] = {"messages": [], "step": None}
    user_data[chat_id]["messages"].append(message.message_id)

async def delete_all_messages(chat_id):
    if chat_id in user_data:
        for msg_id in user_data[chat_id].get("messages", []):
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        user_data[chat_id]["messages"] = []

async def go_to_main_menu(chat_id):
    await delete_all_messages(chat_id)
    user_data[chat_id] = {"messages": [], "step": None}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
    msg = await bot.send_message(chat_id, "üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=markup)
    await add_message(chat_id, msg)

def get_step_markup(options, add_back=True):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for opt in options:
        markup.add(opt)
    if add_back:
        markup.add("–ù–∞–∑–∞–¥")
    return markup

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = {"messages": [], "step": None}
    await go_to_main_menu(chat_id)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(lambda m: m.text in ["–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è"])
async def main_menu_handler(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id] = {"messages": [], "step": None}

    if message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è":
        user_data[chat_id]["step"] = "ask_promo_code"
        markup = get_step_markup(["–¢–∞–∫", "–ù—ñ", "–ó–∞–≤–µ—Ä—à–∏—Ç–∏"], add_back=False)
        msg = await message.answer("–ß–∏ –º–∞—î—Ç–µ –≤–∏ –ø—Ä–æ–º–æ-–∫–æ–¥?", reply_markup=markup)
        await add_message(chat_id, msg)

    elif message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é":
        user_data[chat_id]["step"] = "consult_name"
        msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)

    elif message.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è":
        user_data[chat_id]["step"] = "choose_city"
        markup = get_step_markup(list(CITIES_COVERAGE.keys()))
        msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è:", reply_markup=markup)
        await add_message(chat_id, msg)

# –ü—Ä–æ–º–æ-–∫–æ–¥
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "ask_promo_code")
async def ask_promo_code_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        await go_to_main_menu(chat_id)
        return
    if text == "–¢–∞–∫":
        user_data[chat_id]["step"] = "waiting_for_promo_code"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥:", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    elif text == "–ù—ñ":
        user_data[chat_id]["promo"] = False
        user_data[chat_id]["step"] = "waiting_for_name"
        msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ!–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë:", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–¢–∞–∫', '–ù—ñ' –∞–±–æ '–ó–∞–≤–µ—Ä—à–∏—Ç–∏'.")
        await add_message(chat_id, msg)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_promo_code")
async def waiting_for_promo_code_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text.lower() == "vdmkie":
        user_data[chat_id]["promo"] = True
        user_data[chat_id]["step"] = "waiting_for_name"
        msg = await message.answer("‚úÖ –ü—Ä–æ–º–æ-–∫–æ–¥ –ø—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë:")
        await add_message(chat_id, msg)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–º–æ-–∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏'.", reply_markup=markup)
        await add_message(chat_id, msg)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–æ–≤: –§–ò–û, –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω, —Ç–∞—Ä–∏—Ñ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") in [
    "waiting_for_name", "waiting_for_address", "waiting_for_phone", "waiting_for_tariff", "waiting_for_confirmation"
])
async def order_steps_handler(message: types.Message):
    chat_id = message.chat.id
    step = user_data[chat_id]["step"]
    text = message.text.strip()
    await add_message(chat_id, message)

    # –§–ò–û
    if step == "waiting_for_name":
        if not is_valid_name(text):
            msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏):")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["name"] = text
        user_data[chat_id]["step"] = "waiting_for_address"
        msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:")
        await add_message(chat_id, msg)
        return

    # –ê–¥—Ä–µ—Å
    if step == "waiting_for_address":
        if not is_valid_address(text):
            msg = await message.answer("‚ùó –ê–¥—Ä–µ—Å–∞ –Ω–µ–≤—ñ—Ä–Ω–∞. (–≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: –º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥—ñ–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["address"] = text
        user_data[chat_id]["step"] = "waiting_for_phone"
        msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
        await add_message(chat_id, msg)
        return

    # –¢–µ–ª–µ—Ñ–æ–Ω
    if step == "waiting_for_phone":
        if not is_valid_phone(text):
            msg = await message.answer("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["phone"] = text
        promo = user_data[chat_id].get("promo", False)
        tariffs = PROMO_TARIFFS if promo else TARIFFS
        user_data[chat_id]["step"] = "waiting_for_tariff"
        markup = get_step_markup(list(tariffs.keys()) + ["–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ"], add_back=False)
        summary = (
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:"
        )
        msg = await message.answer(summary, reply_markup=markup)
        await add_message(chat_id, msg)
        return

    # –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
    if step == "waiting_for_tariff":
        promo = user_data[chat_id].get("promo", False)
        tariffs = PROMO_TARIFFS if promo else TARIFFS
        if text == "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ":
            await go_to_main_menu(chat_id)
            return
        if text not in tariffs:
            msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'.")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["selected_tariff"] = text
        user_data[chat_id]["step"] = "waiting_for_confirmation"
        summary = (
            f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω–Ω—ñ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞—è–≤–∫—É:\n\n"
            f"–ü–Ü–ë: {user_data[chat_id]['name']}\n"
            f"–ê–¥—Ä–µ—Å–∞: {user_data[chat_id]['address']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data[chat_id]['phone']}\n"
            f"–¢–∞—Ä–∏—Ñ: {text}\n\n"
            "–Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'.\n"
            "–Ø–∫—â–æ –Ω—ñ - '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'."
        )
        markup = get_step_markup(["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ"], add_back=False)
        msg = await message.answer(summary, reply_markup=markup)
        await add_message(chat_id, msg)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if step == "waiting_for_confirmation":
        if text == "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ":
            await go_to_main_menu(chat_id)
            return
        elif text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
            data = user_data[chat_id]
            promo = data.get("promo", False)
            tariffs_dict = PROMO_TARIFFS if promo else TARIFFS
            tariff_for_send = tariffs_dict.get(data["selected_tariff"], data["selected_tariff"])
            text_to_send = (
                f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:\n\n"
                f"–ü–Ü–ë: {data['name']}\n"
                f"–ê–¥—Ä–µ—Å–∞: {data['address']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                f"–¢–∞—Ä–∏—Ñ: {tariff_for_send}\n"
                f"–¢–∞—Ä–∏—Ñ: {tariff_for_send}\n\n"
                f"–∞–≤—Ç–æ—Ä –†–æ–≥–∞–ª—å–æ–≤ –í–∞–¥–∏–º:"
            )
            await bot.send_message(CHAT_ID, text_to_send)
            await go_to_main_menu(chat_id)
            return
        else:
            msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'.")
            await add_message(chat_id, msg)
            return

# –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") in ["consult_name", "consult_phone"])
async def consult_handler(message: types.Message):
    chat_id = message.chat.id
    step = user_data[chat_id]["step"]
    text = message.text.strip()
    await add_message(chat_id, message)

    if step == "consult_name":
        if not is_valid_name(text):
            msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞ –∑ –≤–µ–ª–∏–∫–æ—Ö –ª—ñ—Ç–µ—Ä–∏ - –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["consult_name"] = text
        user_data[chat_id]["step"] = "consult_phone"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
        await add_message(chat_id, msg)
    elif step == "consult_phone":
        if not is_valid_phone(text):
            msg = await message.answer("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—á–∏–Ω–∞—é—á–∏ —Å 380__________):")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["consult_phone"] = text
        data = user_data[chat_id]
        text_to_send = (
            f"–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:\n\n"
            f"–ü–Ü–ë: {data['consult_name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['consult_phone']}"
        )
        await bot.send_message(CHAT_ID, text_to_send)
        await go_to_main_menu(chat_id)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") in ["choose_city", "coverage_done"])
async def coverage_handler(message: types.Message):
    chat_id = message.chat.id
    step = user_data[chat_id]["step"]
    city = message.text.strip()
    await add_message(chat_id, message)

    if city == "–ù–∞–∑–∞–¥":
        await go_to_main_menu(chat_id)
        return

    if step == "choose_city":
        if city not in CITIES_COVERAGE:
            msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É.")
            await add_message(chat_id, msg)
            return
        link = CITIES_COVERAGE[city]
        await delete_all_messages(chat_id)
        msg = await message.answer(f"–ü–æ–∫—Ä–∏—Ç—Ç—è –≤ –º—ñ—Å—Ç—ñ *{city}*:\n{link}", parse_mode="Markdown")
        await add_message(chat_id, msg)
        markup = get_step_markup(["–ù–∞–∑–∞–¥"], add_back=False)
        user_data[chat_id]["step"] = "coverage_done"
        msg2 = await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥' —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é.", reply_markup=markup)
        await add_message(chat_id, msg2)
        return

    if step == "coverage_done":
        msg = await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥' —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é.")
        await add_message(chat_id, msg)
        return

# –ó–∞–≤–µ—Ä—à–∏—Ç–∏
@dp.message_handler(lambda m: m.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
async def finish_handler(message: types.Message):
    await go_to_main_menu(message.chat.id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
