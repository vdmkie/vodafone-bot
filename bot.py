import os
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)"
}

PROMO_TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (0–≥—Ä–Ω/6–º—ñ—Å.)"
}

CITIES_COVERAGE = {
    "–ö–∏—ó–≤": "https://www.google.com/maps/d/u/0/viewer?mid=1T0wyMmx7jf99vNKMX9qBkqxPnefPbnY&ll=50.45869537257287%2C30.529932392320312&z=11",
    "–î–Ω—ñ–ø—Ä–æ": "https://www.google.com/maps/d/u/0/viewer?mid=1JEKUJnE9XUTZPjd-f8jmXPcvLU4s-QhE&hl=uk&ll=48.47923374885031%2C34.92072785000002&z=15",
    "–õ—É—Ü—å–∫": "https://www.google.com/maps/d/u/0/viewer?mid=1drkIR5NswXCAazpv5qmaf02lL9OfJAc&ll=50.75093726790353%2C25.32392972563127&z=12",
    "–ö—Ä–∏–≤–∏–π –†—ñ–≥": "https://www.google.com/maps/d/u/0/viewer?mid=17kqq7EQadI5_o5bK1_lix-Qo2wbBaJY&ll=47.910800696984694%2C33.393370494687424&z=12",
    "–õ—å–≤—ñ–≤": "https://www.google.com/maps/d/u/0/viewer?mid=1CzE-aG4mdBTiu47Oj2u_lDDPDiNdwsAl&hl=uk&ll=49.78563613970314%2C24.064665899999994&z=17",
    "–ú–∏–∫–æ–ª–∞—ó–≤": "https://www.google.com/maps/d/u/0/viewer?mid=17YcaZFCt8EAnQ1oB8Dd-0xdOwLqWuMw&ll=46.97070266941583%2C31.969450300000013&z=13",
    "–û–¥–µ—Å–∞": "https://www.google.com/maps/d/u/0/viewer?mid=1WlFwsqR57hxtJvzWKHHpguYjw-Gvv6QU&ll=46.505228582262816%2C30.643495007229554&z=10",
    "–ü–æ–ª—Ç–∞–≤–∞": "https://www.google.com/maps/d/u/0/viewer?mid=1aGROaTa6OPOTsGvrzAbdiSPUvpZo1cA&ll=49.59354781387412%2C34.536843507594725&z=12",
    "–†—ñ–≤–Ω–µ": "https://www.google.com/maps/d/u/0/viewer?mid=1jqpYGCecy1zFXhfUz5zwTQr7aV4nXlU&ll=50.625776658980726%2C26.243116906868085&z=12",
    "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å": "https://www.google.com/maps/d/u/0/viewer?mid=1nM68n7nP6D1gRpVC3x2E-8wcq83QRDs&ll=49.560202454739375%2C25.59590906296999&z=12",
    "–•–∞—Ä–∫—ñ–≤": "https://www.google.com/maps/d/u/0/viewer?mid=19jXD4BddAs9_HAE4he7rWUUFKGEaNl3v&ll=49.95160510667597%2C36.370054685897266&z=14",
    "–ß–µ—Ä–Ω—ñ–≥—ñ–≤": "https://www.google.com/maps/d/u/0/viewer?mid=1SR9EvlXEcIk3EeIJeJDHAPqlRYyWTvM&ll=51.50050200415294%2C31.283996303050923&z=12",
    "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ": "https://www.google.com/maps/d/u/0/viewer?mid=1aedZnI80ccELyI3FWKY5xJeed9RotXA&ll=48.28432273335117%2C25.924519174020382&z=12"
}

# --- –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã ---
def is_valid_name(name):
    return bool(re.match(r"^[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+$", name.strip()))

def is_valid_address(address):
    return len(address.strip()) >= 10

def is_valid_phone(phone):
    return bool(re.match(r"^380\d{9}$", phone.strip()))

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ---
async def add_message(chat_id, message, static=False):
    if chat_id not in user_data:
        user_data[chat_id] = {"messages": [], "static_messages": [], "step": None}
    if static:
        user_data[chat_id]["static_messages"].append(message.message_id)
    else:
        user_data[chat_id]["messages"].append(message.message_id)

async def delete_all_messages(chat_id):
    if chat_id in user_data:
        for msg_id in user_data[chat_id].get("messages", []):
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        user_data[chat_id]["messages"] = []

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
    markup.add("–Ø–∫—ñ –∫–∞–Ω–∞–ª–∏ –≤—Ö–æ–¥—è—Ç—å –¥–æ TV ?")
    return markup

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = {"messages": [], "static_messages": [], "step": None}

    photo_url = "https://github.com/vdmkie/vodafone-bot/blob/main/%D0%B0%D0%BA%D1%86%D0%B8%D1%8F.png?raw=true"
    photo = await bot.send_photo(chat_id, photo_url)
    await add_message(chat_id, photo, static=True)

    msg = await message.answer(
        "üëã *–í—ñ—Ç–∞—é! –Ø –í–∞—à —á–∞—Ç-–±–æ—Ç –¢–∞—Ä–∞—Å*\n\n"
        "üí™  *–ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ü–µ...*\n"
        "‚úÖ *–ù–æ–≤–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞!*\n"
        "‚úÖ *C—É—á–∞—Å–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è GPON!*\n"
        "‚úÖ *–®–≤–∏–¥–∫—ñ—Å—Ç—å –¥–æ 1–ì—ñ–≥–∞–±—ñ—Ç/—Å–µ–∫.!*\n"
        "‚úÖ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!*\n"
        "‚úÖ *–ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Å–≤—ñ—Ç–ª–∞!*\n"
        "‚úÖ *–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏!*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É –¥–æ 31.12.2026—Ä., –¥–∞–ª—ñ 250 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Start - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É –¥–æ 31.12.2026—Ä., –¥–∞–ª—ñ 300 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É –¥–æ 31.12.2026—Ä., –¥–∞–ª—ñ 325 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Max - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É –¥–æ 31.12.2026—Ä., –¥–∞–ª—ñ 375 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    await add_message(chat_id, msg, static=True)
    await add_message(chat_id, message) 


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(lambda m: m.text in ["–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è"])
async def main_menu_handler(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id] = {"messages": [], "step": None}

    await add_message(chat_id, message)

    if message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è":
        user_data[chat_id]["step"] = "ask_promo_code"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–¢–∞–∫", "–ù—ñ", "–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
        msg = await message.answer("–ß–∏ –º–∞—î—Ç–µ –í–∏ –ø—Ä–æ–º–æ-–∫–æ–¥?", reply_markup=markup)
        await add_message(chat_id, msg)

    elif message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é":
        user_data[chat_id]["step"] = "consult_name"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)

    elif message.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for city in CITIES_COVERAGE.keys():
            markup.add(city)
        markup.add("–ù–∞–∑–∞–¥")
        user_data[chat_id]["step"] = "choose_city"
        msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è:", reply_markup=markup)
        await add_message(chat_id, msg)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–º–æ-–∫–æ–¥–µ
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "ask_promo_code")
async def ask_promo_code_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
        return

    if text == "–¢–∞–∫":
        user_data[chat_id]["step"] = "waiting_for_promo_code"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥:", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    elif text == "–ù—ñ":
        user_data[chat_id]["promo"] = False
        user_data[chat_id]["step"] = "waiting_for_name"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–¢–∞–∫', '–ù—ñ' –∞–±–æ '–ó–∞–≤–µ—Ä—à–∏—Ç–∏'.")
        await add_message(chat_id, msg)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ-–∫–æ–¥–∞
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_promo_code")
async def waiting_for_promo_code_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text.lower() == "vdmkie":  # –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–æ-–∫–æ–¥
        user_data[chat_id]["promo"] = True
        user_data[chat_id]["step"] = "waiting_for_name"
        msg = await message.answer("‚úÖ –ü—Ä–æ–º–æ-–∫–æ–¥ –ø—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë:")
        await add_message(chat_id, msg)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–º–æ-–∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏'.", reply_markup=markup)
        await add_message(chat_id, msg)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û, –∞–¥—Ä–µ—Å–∞, —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") in ["waiting_for_name", "waiting_for_address", "waiting_for_phone"])
async def order_handler(message: types.Message):
    chat_id = message.chat.id
    step = user_data[chat_id]["step"]
    text = message.text.strip()
    await add_message(chat_id, message)

    if step == "waiting_for_name":
        if not is_valid_name(text):
            msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["name"] = text
        user_data[chat_id]["step"] = "waiting_for_address"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
        await add_message(chat_id, msg)

    elif step == "waiting_for_address":
        if not is_valid_address(text):
            msg = await message.answer("‚ùó –ê–¥—Ä–µ—Å–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["address"] = text
        user_data[chat_id]["step"] = "waiting_for_phone"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX (–±–µ–∑ +):")
        await add_message(chat_id, msg)

    elif step == "waiting_for_phone":
        if not is_valid_phone(text):
            msg = await message.answer("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["phone"] = text

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        promo = user_data[chat_id].get("promo", False)
        tariffs = PROMO_TARIFFS if promo else TARIFFS
        user_data[chat_id]["step"] = "waiting_for_tariff"

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for t in tariffs.keys():
            markup.add(t)
        markup.add("–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ")
        summary = (
            f"–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:"
        )
        msg = await message.answer(summary, reply_markup=markup)
        await add_message(chat_id, msg)

# –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_tariff")
async def tariff_selection_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    promo = user_data[chat_id].get("promo", False)
    tariffs = PROMO_TARIFFS if promo else TARIFFS

    if text == "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–Ω–æ–≤–æ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
        return

    if text not in tariffs:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'.")
        await add_message(chat_id, msg)
        return

    user_data[chat_id]["selected_tariff"] = text
    user_data[chat_id]["step"] = "waiting_for_confirmation"

    summary = (
        f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω–Ω—ñ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞—è–≤–∫—É:\n\n"
        f"–ü–Ü–ë: {user_data[chat_id]['name']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {user_data[chat_id]['address']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data[chat_id]['phone']}\n"
        f"–¢–∞—Ä–∏—Ñ: {text}\n\n"
        "–Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'.\n"
        "–Ø–∫—â–æ –Ω—ñ - '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'."
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ")
    msg = await message.answer(summary, reply_markup=markup)
    await add_message(chat_id, msg)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_confirmation")
async def confirmation_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–Ω–æ–≤–æ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
        return
    elif text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        data = user_data[chat_id]
        promo = data.get("promo", False)
        tariffs_dict = PROMO_TARIFFS if promo else TARIFFS
        tariff_for_send = tariffs_dict.get(data["selected_tariff"], data["selected_tariff"])

        text_to_send = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:\n\n"
            f"üë§ –ü–Ü–ë: {data['name']}\n"
            f"üè† –ê–¥—Ä–µ—Å–∞: {data['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff_for_send}\n\n"
            f"‚úèÔ∏è –∞–≤—Ç–æ—Ä –†–æ–≥–∞–ª—å–æ–≤ –í–∞–¥–∏–º"
        )
        await bot.send_message(CHAT_ID, text_to_send)
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'.")
        await add_message(chat_id, msg)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: —Å–±–æ—Ä –§–ò–û –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") in ["consult_name", "consult_phone"])
async def consult_handler(message: types.Message):
    chat_id = message.chat.id
    step = user_data[chat_id]["step"]
    text = message.text.strip()
    await add_message(chat_id, message)

    if step == "consult_name":
        if not is_valid_name(text):
            msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["consult_name"] = text
        user_data[chat_id]["step"] = "consult_phone"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX (–±–µ–∑ +):")
        await add_message(chat_id, msg)
    elif step == "consult_phone":
        if not is_valid_phone(text):
            msg = await message.answer("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["consult_phone"] = text
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
        data = user_data[chat_id]
        text_to_send = (
            f"‚ÅâÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:\n\n"
            f"üë§ –ü–Ü–ë: {data['consult_name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['consult_phone']}"
        )
        await bot.send_message(CHAT_ID, text_to_send)
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –ø—Ä–∏–π–Ω—è—Ç–æ.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=get_main_menu())
        await add_message(chat_id, msg)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "choose_city")
async def city_choice_handler(message: types.Message):
    chat_id = message.chat.id
    city = message.text.strip()
    await add_message(chat_id, message)

    if city == "–ù–∞–∑–∞–¥":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
        return

    if city not in CITIES_COVERAGE:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É.")
        await add_message(chat_id, msg)
        return

    link = CITIES_COVERAGE[city]
    await delete_all_messages(chat_id)
    msg = await message.answer(f"–ü–æ–∫—Ä–∏—Ç—Ç—è –≤ –º—ñ—Å—Ç—ñ *{city}*:\n{link}", parse_mode="Markdown", disable_web_page_preview=False)
    await add_message(chat_id, msg)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ù–∞–∑–∞–¥")
    user_data[chat_id]["step"] = "coverage_done"
    msg2 = await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥' —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é.", reply_markup=markup)
    await add_message(chat_id, msg2)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "coverage_done")
async def coverage_done_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ù–∞–∑–∞–¥":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥' —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é.")
        await add_message(chat_id, msg)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç–∏" –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@dp.message_handler(lambda m: m.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
async def finish_handler(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id] = {"messages": [], "step": None}
    msg = await message.answer("–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:", reply_markup=get_main_menu())
    await add_message(chat_id, msg)

@dp.message_handler(lambda m: m.text == "–Ø–∫—ñ –∫–∞–Ω–∞–ª–∏ –≤—Ö–æ–¥—è—Ç—å –¥–æ TV ?")
async def tv_channels_handler(message: types.Message):
    chat_id = message.chat.id
    await add_message(chat_id, message)
    
    pdf_url = "https://github.com/vdmkie/vodafone-bot/blob/main/vf_tv.pdf?raw=true"
    msg = await bot.send_document(chat_id, pdf_url)
    await add_message(chat_id, msg)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ù–∞–∑–∞–¥")
    user_data[chat_id]["step"] = "tv_done"
    msg2 = await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥', —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é.", reply_markup=markup)
    await add_message(chat_id, msg2)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "tv_done")
async def tv_done_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ù–∞–∑–∞–¥":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ù–∞–∑–∞–¥' —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é.")
        await add_message(chat_id, msg)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
