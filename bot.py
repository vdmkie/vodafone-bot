# ... –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

# –î–æ–±–∞–≤–∏–º –≤ user_data —Ç–∞—Ä–∏—Ñ—ã –ø–æ –∫–ª—é—á—É (–Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–æ–ø–∫–∏), —á—Ç–æ–±—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–º–µ–Ω–Ω–æ –µ–≥–æ –≤—ã–±–æ—Ä
# –ò –≤–Ω—É—Ç—Ä–∏ handler'–æ–≤ –ø–æ–ø—Ä–∞–≤–∏–º –ª–æ–≥–∏–∫—É.

# --- –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ ---
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_tariff")
async def tariff_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
        return

    promo = user_data[chat_id].get("promo", False)
    tariffs = PROMO_TARIFFS if promo else TARIFFS

    if text not in tariffs:
        msg = await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.")
        await add_message(chat_id, msg)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏) –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_data[chat_id]["tariff_key"] = text
    # –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ‚Äî —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
    user_data[chat_id]["tariff_desc"] = tariffs[text]
    user_data[chat_id]["step"] = "confirm_order"

    name = user_data[chat_id].get("name", "–ù–µ–≤—ñ–¥–æ–º–æ")
    address = user_data[chat_id].get("address", "–ù–µ–≤—ñ–¥–æ–º–æ")
    phone = user_data[chat_id].get("phone", "–ù–µ–≤—ñ–¥–æ–º–æ")
    tariff_key = user_data[chat_id].get("tariff_key", "–ù–µ–≤—ñ–¥–æ–º–æ")
    promo_status = "–¢–∞–∫" if promo else "–ù—ñ"

    summary_text = (
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –í–∞—à—ñ –¥–∞–Ω—ñ:\n\n"
        f"–ü–Ü–ë: {name}\n"
        f"–ê–¥—Ä–µ—Å–∞: {address}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–¢–∞—Ä–∏—Ñ: {tariff_key}\n"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–º–µ–Ω–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏
        f"–ü—Ä–æ–º–æ-–∫–æ–¥: {promo_status}\n\n"
        "–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª –∞–±–æ ¬´–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ¬ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥—É."
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ")
    msg = await message.answer(summary_text, reply_markup=markup)
    await add_message(chat_id, msg)

# --- –í –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ ---
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "confirm_order")
async def confirm_order_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        name = user_data[chat_id].get("name", "–ù–µ–≤—ñ–¥–æ–º–æ")
        address = user_data[chat_id].get("address", "–ù–µ–≤—ñ–¥–æ–º–æ")
        phone = user_data[chat_id].get("phone", "–ù–µ–≤—ñ–¥–æ–º–æ")
        tariff_desc = user_data[chat_id].get("tariff_desc", "–ù–µ–≤—ñ–¥–æ–º–æ")  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ña
        promo = user_data[chat_id].get("promo", False)
        promo_status = "–¢–∞–∫" if promo else "–ù—ñ"

        order_text = (
            f"üìù *–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è*\n"
            f"–ü–Ü–ë: {name}\n"
            f"–ê–¥—Ä–µ—Å–∞: {address}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–¢–∞—Ä–∏—Ñ: {tariff_desc}\n"  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É —Ç–∞—Ä–∏—Ñ–∞
            f"–ü—Ä–æ–º–æ-–∫–æ–¥: {promo_status}"
        )

        try:
            await bot.send_message(CHAT_ID, order_text, parse_mode="Markdown")
            await delete_all_messages(chat_id)
            user_data[chat_id] = {"messages": [], "step": None}
            msg = await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞! –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=get_main_menu())
            await add_message(chat_id, msg)
        except Exception as e:
            msg = await message.answer(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏: {e}")
            await add_message(chat_id, msg)

    elif text == "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": "waiting_for_name"}
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'.")
        await add_message(chat_id, msg)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é" ---
@dp.message_handler(lambda m: m.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
async def consult_start_handler(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id] = {"messages": [], "step": "consult_name"}
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
    await add_message(chat_id, msg)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") in ["consult_name", "consult_phone"])
async def consult_handler(message: types.Message):
    chat_id = message.chat.id
    step = user_data[chat_id]["step"]
    text = message.text.strip()
    await add_message(chat_id, message)

    if step == "consult_name":
        if not is_valid_name(text):
            msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["name"] = text
        user_data[chat_id]["step"] = "consult_phone"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX (–±–µ–∑ +):")
        await add_message(chat_id, msg)

    elif step == "consult_phone":
        if not is_valid_phone(text):
            msg = await message.answer("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["phone"] = text

        name = user_data[chat_id].get("name", "–ù–µ–≤—ñ–¥–æ–º–æ")
        phone = user_data[chat_id].get("phone", "–ù–µ–≤—ñ–¥–æ–º–æ")

        consult_text = (
            f"üìù *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é*\n"
            f"–ü–Ü–ë: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        )

        try:
            await bot.send_message(CHAT_ID, consult_text, parse_mode="Markdown")
            await delete_all_messages(chat_id)
            user_data[chat_id] = {"messages": [], "step": None}
            msg = await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –ø—Ä–∏–π–Ω—è—Ç–∞! –ù–µ–∑–∞–±–∞—Ä–æ–º –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è –Ω–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.", reply_markup=get_main_menu())
            await add_message(chat_id, msg)
        except Exception as e:
            msg = await message.answer(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏: {e}")
            await add_message(chat_id, msg)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è" ---
@dp.message_handler(lambda m: m.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
async def coverage_handler(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    coverage_url = "https://www.google.com/maps/d/u/0/viewer?mid=1T0wyMmx7jf99vNKMX9qBkqxPnefPbnY&ll=50.45869537257289%2C30.529932392320312&z=11"
    msg = await message.answer(f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–∫—Ä–∏—Ç—Ç—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{coverage_url}", disable_web_page_preview=True)
    await add_message(chat_id, msg)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
    user_data[chat_id]["step"] = "completed"
    msg2 = await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é.", reply_markup=markup)
    await add_message(chat_id, msg2)
