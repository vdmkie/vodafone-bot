import os
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
CHAT_ID = int(os.getenv("CHAT_ID"))  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∑–∞—è–≤–æ–∫

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –¢–∞—Ä–∏—Ñ–∏
TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -125–≥—Ä–Ω/–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (125–≥—Ä–Ω/–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 125–≥—Ä–Ω/–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (125–≥—Ä–Ω/–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (125–≥—Ä–Ω/–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 125–≥—Ä–Ω/–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (125–≥—Ä–Ω/–º—ñ—Å.)"
}

PROMO_TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -0–≥—Ä–Ω/6–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 0–≥—Ä–Ω/6–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 0–≥—Ä–Ω/6–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 0–≥—Ä–Ω/6–º—ñ—Å.": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (0–≥—Ä–Ω/6–º—ñ—Å.)"
}

# –ü–æ–∫—Ä–∏—Ç—Ç—è –º—ñ—Å—Ç
CITIES_COVERAGE = {
    "–ö–∏—ó–≤": "https://www.google.com/maps/d/viewer?mid=...",
    "–õ—å–≤—ñ–≤": "https://www.google.com/maps/d/viewer?mid=..."
    # –¥–æ–¥–∞–π—Ç–µ —Ä–µ—à—Ç—É –º—ñ—Å—Ç
}

# --- –í–∞–ª—ñ–¥–∞—Ü—ñ—è ---
def is_valid_name(name):
    return bool(re.match(r"^[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+$", name.strip()))

def is_valid_address(address):
    return len(address.strip()) >= 15

def is_valid_phone(phone):
    return bool(re.match(r"^380\d{9}$", phone.strip()))

# --- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ---
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è", "–Ø–∫—ñ –∫–∞–Ω–∞–ª–∏ –≤—Ö–æ–¥—è—Ç—å —É —Ç–∞—Ä–∏—Ñ")
    return markup

def get_back_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ù–∞–∑–∞–¥")
    return markup

def get_finish_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
    return markup

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    user_data[message.chat.id] = {"messages": [], "step": None}
    await message.answer("–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:", reply_markup=get_main_menu())

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
@dp.message_handler(lambda m: m.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
async def order_connect(message: types.Message):
    user_data[message.chat.id]["step"] = "name"
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë:", reply_markup=get_back_keyboard())

@dp.message_handler(lambda m: m.text == "–ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    user_data[message.chat.id]["step"] = None
    await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# --- –í–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "name")
async def enter_name(message: types.Message):
    if not is_valid_name(message.text):
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    user_data[message.chat.id]["name"] = message.text
    user_data[message.chat.id]["step"] = "address"
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É (–º—ñ–Ω. 15 —Å–∏–º–≤–æ–ª—ñ–≤):")

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "address")
async def enter_address(message: types.Message):
    if not is_valid_address(message.text):
        await message.answer("–ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    user_data[message.chat.id]["address"] = message.text
    user_data[message.chat.id]["step"] = "phone"
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "phone")
async def enter_phone(message: types.Message):
    if not is_valid_phone(message.text):
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    user_data[message.chat.id]["phone"] = message.text
    user_data[message.chat.id]["step"] = "promo"
    await message.answer("–Ø–∫—â–æ –º–∞—î—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ ‚Äî –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ, –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–ù–µ–º–∞—î':")

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "promo")
async def enter_promo(message: types.Message):
    promo = message.text.strip().lower()
    if promo != "–Ω–µ–º–∞—î":
        user_data[message.chat.id]["tariffs"] = PROMO_TARIFFS
    else:
        user_data[message.chat.id]["tariffs"] = TARIFFS
    # –í–∏–±—ñ—Ä —Ç–∞—Ä–∏—Ñ—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for t in user_data[message.chat.id]["tariffs"].keys():
        markup.add(t)
    user_data[message.chat.id]["step"] = "tariff"
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "tariff")
async def choose_tariff(message: types.Message):
    tariffs = user_data[message.chat.id]["tariffs"]
    if message.text not in tariffs:
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.")
        return
    user_data[message.chat.id]["tariff"] = tariffs[message.text]
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
    name = user_data[message.chat.id]["name"]
    address = user_data[message.chat.id]["address"]
    phone = user_data[message.chat.id]["phone"]
    tariff = user_data[message.chat.id]["tariff"]
    text = (f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:\n\n"
            f"üë§ {name}\nüè† {address}\nüìû {phone}\nüì¶ {tariff}")
    await bot.send_message(CHAT_ID, text)
    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
                         reply_markup=get_finish_keyboard())
    user_data[message.chat.id]["step"] = "finish"

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è ---
@dp.message_handler(lambda m: m.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
async def finish_dialog(message: types.Message):
    user_data[message.chat.id]["step"] = None
    await message.answer("–í—ñ—Ç–∞—î–º–æ! –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:", reply_markup=get_main_menu())

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è ---
@dp.message_handler(lambda m: m.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
async def check_coverage(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city in CITIES_COVERAGE.keys():
        markup.add(city)
    markup.add("–ù–∞–∑–∞–¥")
    user_data[message.chat.id]["step"] = "coverage_city"
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:", reply_markup=markup)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "coverage_city")
async def coverage_city(message: types.Message):
    city = message.text
    if city in CITIES_COVERAGE:
        await message.answer(f"üìç –ü–æ–∫—Ä–∏—Ç—Ç—è —É –º—ñ—Å—Ç—ñ {city}: {CITIES_COVERAGE[city]}",
                             reply_markup=get_finish_keyboard())
        user_data[message.chat.id]["step"] = "finish"
    elif city == "–ù–∞–∑–∞–¥":
        await go_back(message)
    else:
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑ –∫–Ω–æ–ø–æ–∫.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
