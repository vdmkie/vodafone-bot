# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_data[message.chat.id] = {"messages": [], "step": None}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")

    photo = await bot.send_photo(
        message.chat.id,
        "https://www.vodafone.ua/storage/editor/fotos/7f387e69a10a3da04355e7cf885e59c5_1741849417.jpg"
    )
    user_data[message.chat.id]["messages"].append(photo.message_id)

    msg = await message.answer(
        "üëã *–í—ñ—Ç–∞—î–º–æ —É Vodafone üá∫üá¶*\n\n"
        "üëª *–Ø –í–∞—à –±–æ—Ç –¢–∞—Ä–∞—Å*\n"
        "üí™  *–ü–µ—Ä–µ–≤–∞–≥–∏ –¥–æ–º–∞—à–Ω—å–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤—ñ–¥ Vodafone —Ü–µ...*\n"
        "‚úÖ *–ù–æ–≤–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞!*\n"
        "‚úÖ *C—É—á–∞—Å–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è GPON!*\n"
        "‚úÖ *–®–≤–∏–¥–∫—ñ—Å—Ç—å 1–ì—ñ–≥–∞–±—ñ—Ç/—Å–µ–∫.!*\n"
        "‚úÖ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ —Ç–∞ —à–≤–∏–¥–∫–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!*\n"
        "‚úÖ *–ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Å–≤—ñ—Ç–ª–∞!*\n"
        "‚úÖ *–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏!*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=markup,
        parse_mode="Markdown"
    )
    user_data[message.chat.id]["messages"].append(msg.message_id)


# --- –ü–æ—á–∞—Ç–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó ---
@dp.message_handler(lambda message: message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
async def request_consult_name(message: types.Message):
    user_data[message.chat.id] = {"step": "consult_name", "messages": []}
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
    user_data[message.chat.id]["messages"].append(msg.message_id)


# --- –û–±—Ä–æ–±–∫–∞ –ü–Ü–ë –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó ---
@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "consult_name")
async def handle_consult_name(message: types.Message):
    if not is_valid_name(message.text):
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –ü—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á")
        user_data[message.chat.id]["messages"].append(msg.message_id)
        return
    user_data[message.chat.id]["name"] = message.text.strip()
    user_data[message.chat.id]["step"] = "consult_phone"
    msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 380...):")
    user_data[message.chat.id]["messages"].append(msg.message_id)


# --- –û–±—Ä–æ–±–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó ---
@dp.message_handler(lambda message: user_data.get(message.chat.id, {}).get("step") == "consult_phone")
async def handle_consult_phone(message: types.Message):
    if not is_valid_phone(message.text):
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        user_data[message.chat.id]["messages"].append(msg.message_id)
        return

    user_data[message.chat.id]["phone"] = message.text.strip()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–≤–æ–π —á–∞—Ç
    text = (
        "üìû –ó–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:\n\n"
        f"üë§ –ü–Ü–ë: {user_data[message.chat.id]['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[message.chat.id]['phone']}"
    )
    await bot.send_message(CHAT_ID, text)

    await message.answer("‚úÖ –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –ú–∏ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    await reset_user_state(message)


# --- –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è ---
@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
async def check_coverage(message: types.Message):
    await message.answer("üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–∫—Ä–∏—Ç—Ç—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\nhttps://vodafone.ua/uk/internet-home/coverage")
