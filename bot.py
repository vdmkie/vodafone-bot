import os
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)"
}

PROMO_TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (0–≥—Ä–Ω/6–º—ñ—Å.)"
}

def is_valid_name(name):
    return bool(re.match(r"^[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+$", name.strip()))

def is_valid_address(address):
    return len(address.strip()) >= 10

def is_valid_phone(phone):
    return bool(re.match(r"^380\d{9}$", phone.strip()))

async def add_message(chat_id, message):
    if chat_id not in user_data:
        user_data[chat_id] = {"messages": [], "step": None}
    user_data[chat_id]["messages"].append(message.message_id)

async def delete_all_messages(chat_id):
    if chat_id in user_data:
        for msg_id in user_data[chat_id].get("messages", []):
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        user_data[chat_id]["messages"] = []

def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
    return markup

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = {"messages": [], "step": None}
    photo_url = "https://github.com/vdmkie/vodafone-bot/blob/main/%D0%B0%D0%BA%D1%86%D0%B8%D1%8F.png?raw=true"
    photo = await bot.send_photo(chat_id, photo_url)
    await add_message(chat_id, photo)

    text = (
        "üëã *–í—ñ—Ç–∞—é! –Ø –í–∞—à —á–∞—Ç-–±–æ—Ç –¢–∞—Ä–∞—Å*\n\n"
        "üí™  *–ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ü–µ...*\n"
        "‚úÖ *–ù–æ–≤–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞!*\n"
        "‚úÖ *C—É—á–∞—Å–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è GPON!*\n"
        "‚úÖ *–®–≤–∏–¥–∫—ñ—Å—Ç—å –¥–æ 1–ì—ñ–≥–∞–±—ñ—Ç/—Å–µ–∫.!*\n"
        "‚úÖ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!*\n"
        "‚úÖ *–ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Å–≤—ñ—Ç–ª–∞!*\n"
        "‚úÖ *–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏!*\n\n"
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞ –¥–æ 01.01.2026, –¥–∞–ª—ñ 250 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Start - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 300 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 325 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Max - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 375 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá"
    )
    msg = await message.answer(text, reply_markup=get_main_menu(), parse_mode="Markdown")
    await add_message(chat_id, msg)
    await add_message(chat_id, message)

@dp.message_handler(lambda m: m.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
async def ask_promo_question(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id] = {"messages": [], "step": "promo_question"}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–¢–∞–∫", "–ù—ñ")
    msg = await message.answer("–ß–∏ –º–∞—î—Ç–µ –í–∏ –ø—Ä–æ–º–æ-–∫–æ–¥?", reply_markup=markup)
    await add_message(chat_id, msg)
    await add_message(chat_id, message)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "promo_question")
async def handle_promo_question(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–¢–∞–∫":
        user_data[chat_id]["step"] = "waiting_for_promo"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥:", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    elif text == "–ù—ñ":
        user_data[chat_id]["promo"] = False
        user_data[chat_id]["step"] = "waiting_for_name"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–¢–∞–∫' –∞–±–æ '–ù—ñ'.")
        await add_message(chat_id, msg)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_promo")
async def promo_code_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text.lower() == "vdmkie":
        user_data[chat_id]["promo"] = True
        user_data[chat_id]["step"] = "waiting_for_name"
        msg = await message.answer("‚úÖ –ü—Ä–æ–º–æ-–∫–æ–¥ –ø—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
        await add_message(chat_id, msg)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É", "–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–º–æ-–∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É.", reply_markup=markup)
        await add_message(chat_id, msg)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "promo_question")
async def promo_retry_or_finish(message: types.Message):
    # –î–ª—è –∫–Ω–æ–ø–æ–∫ "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É" —Ç–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç–∏" –ø–æ—Å–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)
    if text == "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É":
        user_data[chat_id]["step"] = "waiting_for_promo"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥:", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    elif text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await add_message(chat_id, msg)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") in ["waiting_for_name", "waiting_for_address", "waiting_for_phone"])
async def order_handler(message: types.Message):
    chat_id = message.chat.id
    step = user_data.get(chat_id, {}).get("step")
    text = message.text.strip()
    await add_message(chat_id, message)

    if step == "waiting_for_name":
        if not is_valid_name(text):
            msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["name"] = text
        user_data[chat_id]["step"] = "waiting_for_address"
        msg = await message.answer("‚úÖ –ü–Ü–ë –ø—Ä–∏–π–Ω—è—Ç–æ. –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
        await add_message(chat_id, msg)

    elif step == "waiting_for_address":
        if not is_valid_address(text):
            msg = await message.answer("‚ùó –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["address"] = text
        user_data[chat_id]["step"] = "waiting_for_phone"
        msg = await message.answer("‚úÖ –ê–¥—Ä–µ—Å—É –ø—Ä–∏–π–Ω—è—Ç–æ. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX (–±–µ–∑ +):")
        await add_message(chat_id, msg)

    elif step == "waiting_for_phone":
        if not is_valid_phone(text):
            msg = await message.answer("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["phone"] = text

        promo = user_data[chat_id].get("promo", False)
        tariffs = PROMO_TARIFFS if promo else TARIFFS

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for key in tariffs.keys():
            markup.add(key)
        markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")

        user_data[chat_id]["step"] = "waiting_for_tariff"
        msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)
        await add_message(chat_id, msg)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_tariff")
async def tariff_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": None}
        msg = await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
        return

    promo = user_data[chat_id].get("promo", False)
    tariffs = PROMO_TARIFFS if promo else TARIFFS

    if text not in tariffs:
        msg = await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.")
        await add_message(chat_id, msg)
        return

    user_data[chat_id]["tariff"] = tariffs[text]
    user_data[chat_id]["step"] = "confirm_order"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    name = user_data[chat_id].get("name", "–ù–µ–≤—ñ–¥–æ–º–æ")
    address = user_data[chat_id].get("address", "–ù–µ–≤—ñ–¥–æ–º–æ")
    phone = user_data[chat_id].get("phone", "–ù–µ–≤—ñ–¥–æ–º–æ")
    tariff = user_data[chat_id].get("tariff", "–ù–µ–≤—ñ–¥–æ–º–æ")
    promo_status = "–¢–∞–∫" if promo else "–ù—ñ"

    summary_text = (
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –í–∞—à—ñ –¥–∞–Ω—ñ:\n\n"
        f"–ü–Ü–ë: {name}\n"
        f"–ê–¥—Ä–µ—Å–∞: {address}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–¢–∞—Ä–∏—Ñ: {tariff}\n\n"
        "–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏¬ª –∞–±–æ ¬´–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ¬ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥—É."
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ")
    msg = await message.answer(summary_text, reply_markup=markup)
    await add_message(chat_id, msg)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "confirm_order")
async def confirm_order_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        name = user_data[chat_id].get("name", "–ù–µ–≤—ñ–¥–æ–º–æ")
        address = user_data[chat_id].get("address", "–ù–µ–≤—ñ–¥–æ–º–æ")
        phone = user_data[chat_id].get("phone", "–ù–µ–≤—ñ–¥–æ–º–æ")
        tariff = user_data[chat_id].get("tariff", "–ù–µ–≤—ñ–¥–æ–º–æ")
        promo = user_data[chat_id].get("promo", False)
        promo_status = "–ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π" if promo else "–≤—ñ–¥–∫—Ä–∏—Ç–∏–π"

        order_text = (
            f"üìù *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ - –∞–≤—Ç–æ—Ä –í–∞–¥–∏–º –†–æ–≥–∞–ª—å–æ–≤*\n"
            f"–ü–Ü–ë: {name}\n"
            f"–ê–¥—Ä–µ—Å–∞: {address}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–¢–∞—Ä–∏—Ñ: {tariff}\n"
            f"–ü—Ä–æ–º–æ: {promo_status}"
        )

        try:
            await bot.send_message(CHAT_ID, order_text, parse_mode="Markdown")
            await delete_all_messages(chat_id)
            user_data[chat_id] = {"messages": [], "step": None}
            msg = await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—å –∑ –í–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=get_main_menu())
            await add_message(chat_id, msg)
        except Exception as e:
            msg = await message.answer(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏: {e}")
            await add_message(chat_id, msg)

    elif text == "–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ":
        await delete_all_messages(chat_id)
        user_data[chat_id] = {"messages": [], "step": "waiting_for_name"}
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' –∞–±–æ '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'.")
        await add_message(chat_id, msg)

@dp.message_handler(lambda m: m.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
async def finish_handler(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id] = {"messages": [], "step": None}
    msg = await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
    await add_message(chat_id, msg)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
