import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç\n" (3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç (3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)",

    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç\n" (6 –º—ñ—Å—è—Ü—ñ–≤ –ø–æ 125 –≥—Ä–Ω, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç (6 –º—ñ—Å—è—Ü—ñ–≤ –ø–æ 125 –≥—Ä–Ω, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)",

    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç+TV\n" (3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç+TV (3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)",

    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç+TV Pro\n" (3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 350 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç+TV Pro (3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 350 –≥—Ä–Ω/–º—ñ—Å.)"
}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_data[message.chat.id] = {}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")
    await message.answer(
        "üëã *–í—ñ—Ç–∞—î–º–æ —É Vodafone üá∫üá¶*\n\n"
        "üëª *–Ø –í–∞—à –±–æ—Ç –¢–∞—Ä–∞—Å*\n"

        "üí™  *–ü–µ—Ä–µ–≤–∞–≥–∏ –¥–æ–º–∞—à–Ω—å–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤—ñ–¥ Vodafone —Ü–µ...*\n"

        "‚úÖ *–ù–æ–≤–∞, —Å—É—á–∞—Å–Ω–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞*\n"

        "‚úÖ *–ù–∞–¥—ñ–π–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –∑–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—î—é GPON*\n"

        "‚úÖ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è*\n"

        "‚úÖ *–ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Å–≤—ñ—Ç–ª–∞!*\n"

        "‚úÖ *–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑!*\n\n"
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç - –≤–∞—Ä—ñ–∞–Ω—Ç ‚Ññ1*\n"
        "*3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ*, –¥–∞–ª—ñ 250 –≥—Ä–Ω/–º—ñ—Å.\n\n"
        
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç - –≤–∞—Ä—ñ–∞–Ω—Ç ‚Ññ2*\n"
        "*6 –º—ñ—Å—è—Ü—ñ–≤ –ø–æ 125 –≥—Ä–Ω/–º—ñ—Å.*, –¥–∞–ª—ñ 250 –≥—Ä–Ω/–º—ñ—Å.\n\n"

        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç + TV*\n"
        "*3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ*, –¥–∞–ª—ñ 300 –≥—Ä–Ω/–º—ñ—Å.\n\n"

        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –ì—ñ–≥–∞–±—ñ—Ç + TV Pro*\n"
        "*3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ*, –¥–∞–ª—ñ 350 –≥—Ä–Ω/–º—ñ—Å.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É¬ª, —â–æ–± –ø–æ—á–∞—Ç–∏.",
        reply_markup=markup,
        parse_mode="Markdown"
    )

@dp.message_handler(commands=['id'])
async def send_chat_id(message: types.Message):
    await message.answer(f"–í–∞—à CHAT_ID: `{message.chat.id}`", parse_mode="Markdown")

@dp.message_handler(lambda message: message.text == "–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")
async def get_name(message: types.Message):
    user_data[message.chat.id] = {}
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ\n"
                         "(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")

@dp.message_handler(lambda message: message.chat.id in user_data and 'name' not in user_data[message.chat.id])
async def get_address(message: types.Message):
    user_data[message.chat.id]['name'] = message.text
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∞—à—É –∞–¥—Ä–µ—Å—É –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n"
                         "(–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")

@dp.message_handler(lambda message: message.chat.id in user_data and 'address' not in user_data[message.chat.id])
async def get_phone(message: types.Message):
    user_data[message.chat.id]['address'] = message.text
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
                         "(–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 380_____________):")

@dp.message_handler(lambda message: message.chat.id in user_data and 'phone' not in user_data[message.chat.id])
async def choose_tariff(message: types.Message):
    user_data[message.chat.id]['phone'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for tariff_name in TARIFFS:
        markup.add(tariff_name)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

@dp.message_handler(lambda message: message.chat.id in user_data and 'tariff' not in user_data[message.chat.id])
async def finish(message: types.Message):
    if message.text not in TARIFFS:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑—ñ —Å–ø–∏—Å–∫—É.")
        return

    user_data[message.chat.id]['tariff'] = message.text
    data = user_data[message.chat.id]

    text = (
        "üì© –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É:\n\n"
        f"üë§ –ü–Ü–ë: {data['name']}\n"
        f"üè† –ê–¥—Ä–µ—Å–∞: {data['address']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üì¶ –û–±—Ä–∞–Ω–∏–π —Ç–∞—Ä–∏—Ñ: {TARIFFS[data['tariff']]}"
    )

    await bot.send_message(CHAT_ID, text)

    await message.answer(
        "‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞. –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
        reply_markup=types.ReplyKeyboardRemove()
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")
    await message.answer("–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ —â–µ –æ–¥–Ω—É –∑–∞—è–≤–∫—É ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.", reply_markup=markup)

    del user_data[message.chat.id]

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
