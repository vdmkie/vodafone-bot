import os
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 125–≥–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 01.01.2026—Ä., –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ 26 —Ä–æ–∫—É)"
}

PROMO_TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (0–≥—Ä–Ω/6–º—ñ—Å.)"
}

PROMO_CODE = "vdmkie"

def is_valid_name(name):
    return bool(re.match(r"^[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+$", name.strip()))

def is_valid_address(address):
    return len(address.strip()) >= 10

def is_valid_phone(phone):
    return bool(re.match(r"^380\d{9}$", phone.strip()))

async def add_message(chat_id, message):
    if chat_id not in user_data:
        user_data[chat_id] = {"messages": [], "step": None}
    user_data[chat_id]["messages"].append(message.message_id)

async def delete_all_messages(chat_id):
    if chat_id in user_data:
        for msg_id in user_data[chat_id].get("messages", []):
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        user_data[chat_id]["messages"] = []

def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
    return markup

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = {"messages": [], "step": None, "promo": False}

    photo_url = "https://github.com/vdmkie/vodafone-bot/blob/main/%D0%B0%D0%BA%D1%86%D0%B8%D1%8F.png?raw=true"
    photo = await bot.send_photo(chat_id, photo_url)
    await add_message(chat_id, photo)

    msg = await message.answer(
        "üëã *–í—ñ—Ç–∞—é! –Ø –í–∞—à —á–∞—Ç-–±–æ—Ç –¢–∞—Ä–∞—Å*\n\n"
        "üí™  *–ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ü–µ...*\n"
        "‚úÖ *–ù–æ–≤–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞!*\n"
        "‚úÖ *C—É—á–∞—Å–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è GPON!*\n"
        "‚úÖ *–®–≤–∏–¥–∫—ñ—Å—Ç—å –¥–æ 1–ì—ñ–≥–∞–±—ñ—Ç/—Å–µ–∫.!*\n"
        "‚úÖ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!*\n"
        "‚úÖ *–ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Å–≤—ñ—Ç–ª–∞!*\n"
        "‚úÖ *–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏!*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞ –¥–æ 01.01.2026, –¥–∞–ª—ñ 250 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Start - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 300 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 325 –≥—Ä–Ω/–º—ñ—Å.*\n\n" 
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Max - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –∞–±–æ–Ω–ø–ª–∞—Ç–∞  –¥–æ 01.01.2026, –¥–∞–ª—ñ 375 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    await add_message(chat_id, msg)
    await add_message(chat_id, message)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
@dp.message_handler(lambda m: m.text in ["–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è"])
async def menu_handler(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id] = {"messages": [], "step": None, "promo": False}
    await add_message(chat_id, message)

    if message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è":
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø—Ä–æ–º–æ-–∫–æ–¥
        user_data[chat_id]["step"] = "ask_promo"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–¢–∞–∫", "–ù—ñ")
        msg = await message.answer("–ß–∏ –º–∞—î—Ç–µ –≤–∏ –ø—Ä–æ–º–æ-–∫–æ–¥?", reply_markup=markup)
        await add_message(chat_id, msg)

    elif message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é":
        user_data[chat_id]["step"] = "consult_name"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)

    elif message.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è":
        user_data[chat_id]["step"] = "check_coverage"
        await handle_coverage(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ø—Ä–æ–º–æ-–∫–æ–¥
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "ask_promo")
async def ask_promo_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip().lower()
    await add_message(chat_id, message)

    if text == "—Ç–∞–∫":
        user_data[chat_id]["step"] = "waiting_for_promo"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥:", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    elif text == "–Ω—ñ":
        user_data[chat_id]["promo"] = False
        user_data[chat_id]["step"] = "waiting_for_name"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=types.ReplyKeyboardRemove())
        await add_message(chat_id, msg)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–¢–∞–∫", "–ù—ñ")
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–¢–∞–∫' –∞–±–æ '–ù—ñ'.", reply_markup=markup)
        await add_message(chat_id, msg)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ-–∫–æ–¥–∞
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_promo")
async def promo_code_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text.lower() == PROMO_CODE:
        user_data[chat_id]["promo"] = True
        user_data[chat_id]["step"] = "waiting_for_name"
        msg = await message.answer("‚úÖ –ü—Ä–æ–º–æ-–∫–æ–¥ –ø—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
        await add_message(chat_id, msg)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–º–æ-–∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–∞–≤–µ—Ä—à–∏—Ç–∏' –¥–ª—è –≤–∏—Ö–æ–¥—É.", reply_markup=markup)
        await add_message(chat_id, msg)
        user_data[chat_id]["step"] = "waiting_for_promo"

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è" - —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–∏–º—è, –∞–¥—Ä–µ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω) ===
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") in ["waiting_for_name", "waiting_for_address", "waiting_for_phone"])
async def order_handler(message: types.Message):
    chat_id = message.chat.id
    step = user_data[chat_id]["step"]
    text = message.text.strip()
    await add_message(chat_id, message)

    if step == "waiting_for_name":
        if not is_valid_name(text):
            msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["name"] = text
        user_data[chat_id]["step"] = "waiting_for_address"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
        await add_message(chat_id, msg)

    elif step == "waiting_for_address":
        if not is_valid_address(text):
            msg = await message.answer("‚ùó –ê–¥—Ä–µ—Å–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["address"] = text
        user_data[chat_id]["step"] = "waiting_for_phone"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380xxxxxxxxx (–±–µ–∑ +):")
        await add_message(chat_id, msg)

    elif step == "waiting_for_phone":
        if not is_valid_phone(text):
            msg = await message.answer("‚ùó –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 12 —Ü–∏—Ñ—Ä —ñ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 380 (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 380991234567). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["phone"] = text

        # –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–æ–≤
        promo = user_data[chat_id].get("promo", False)
        tariffs = PROMO_TARIFFS if promo else TARIFFS

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for t in tariffs.keys():
            markup.add(t)
        msg = await message.answer("–û–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)
        user_data[chat_id]["step"] = "waiting_for_tariff"
        await add_message(chat_id, msg)

# –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_tariff")
async def tariff_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    promo = user_data[chat_id].get("promo", False)
    tariffs = PROMO_TARIFFS if promo else TARIFFS

    await add_message(chat_id, message)

    if text not in tariffs:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.")
        await add_message(chat_id, msg)
        return

    user_data[chat_id]["tariff"] = tariffs[text]
    user_data[chat_id]["step"] = "confirm_order"

    data = user_data[chat_id]
    confirm_text = (
        f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
        f"–ü–Ü–ë: {data['name']}\n"
        f"–ê–¥—Ä–µ—Å–∞: {data['address']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–¢–∞—Ä–∏—Ñ: {text}\n\n"
        f"–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è - '–°–∫–∞—Å—É–≤–∞—Ç–∏'."
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–°–∫–∞—Å—É–≤–∞—Ç–∏")
    msg = await message.answer(confirm_text, reply_markup=markup)
    await add_message(chat_id, msg)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "confirm_order")
async def confirm_order_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip().lower()
    await add_message(chat_id, message)

    if text == "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        data = user_data[chat_id]
        order_text = (
            f"–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø\n"
            f"–ü–Ü–ë: {data['name']}\n"
            f"–ê–¥—Ä–µ—Å–∞: {data['address']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"–¢–∞—Ä–∏—Ñ: {data['tariff']}\n"
            f"–ü—Ä–æ–º–æ-–∫–æ–¥: {'—Ç–∞–∫' if data.get('promo') else '–Ω—ñ'}"
        )
        await bot.send_message(CHAT_ID, order_text)
        await message.answer("–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –ú–∏ –∑ –≤–∞–º–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=get_main_menu())
        user_data[chat_id]["step"] = None
        user_data[chat_id]["promo"] = False
        user_data[chat_id]["messages"] = []
    elif text == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu())
        user_data[chat_id]["step"] = None
        user_data[chat_id]["promo"] = False
        user_data[chat_id]["messages"] = []
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–°–∫–∞—Å—É–≤–∞—Ç–∏")
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' –∞–±–æ '–°–∫–∞—Å—É–≤–∞—Ç–∏'.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é" ‚Äî —Å–±–æ—Ä –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "consult_name")
async def consult_name_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if not is_valid_name(text):
        msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")
        await add_message(chat_id, msg)
        return
    user_data[chat_id]["consult_name"] = text
    user_data[chat_id]["step"] = "consult_phone"
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380xxxxxxxxx (–±–µ–∑ +):")
    await add_message(chat_id, msg)

@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "consult_phone")
async def consult_phone_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if not is_valid_phone(text):
        msg = await message.answer("‚ùó –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ 12 —Ü–∏—Ñ—Ä —ñ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 380 (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 380991234567). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        await add_message(chat_id, msg)
        return

    user_data[chat_id]["consult_phone"] = text
    data = user_data[chat_id]
    consult_text = (
        f"–ù–û–í–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Ø\n"
        f"–ü–Ü–ë: {data['consult_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['consult_phone']}"
    )
    await bot.send_message(CHAT_ID, consult_text)
    await message.answer("–î—è–∫—É—î–º–æ! –ú–∏ –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏–º–æ –≤–∞–º –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=get_main_menu())
    user_data[chat_id]["step"] = None
    user_data[chat_id]["messages"] = []

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è ‚Äî –∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
async def handle_coverage(message):
    chat_id = message.chat.id
    msg = await message.answer(
        "–î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –∞–¥—Ä–µ—Å—É –∞–±–æ —Ä–∞–π–æ–Ω.\n\n"
        "–ü–æ–∫–∏ —â–æ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    )
    await add_message(chat_id, msg)

@dp.message_handler()
async def fallback(message: types.Message):
    chat_id = message.chat.id
    step = user_data.get(chat_id, {}).get("step")
    if step:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—è –º–µ–Ω—é –∞–±–æ –∑–∞–≤–µ—Ä—à—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é.")
        await add_message(chat_id, msg)
    else:
        await start(message)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
