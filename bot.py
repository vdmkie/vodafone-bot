import os
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –¢–∞—Ä–∏—Ñ—ã ---
TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)"
}

PROMO_TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (0–≥—Ä–Ω/6–º—ñ—Å.)"
}

user_data = {}

# --- –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã ---
def is_valid_name(name):
    return bool(re.match(r"^[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+$", name.strip()))

def is_valid_address(address):
    return len(address.strip()) >= 20

def is_valid_phone(phone):
    return bool(re.match(r"^380\d{9}$", phone.strip()))

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ---
async def add_message(chat_id, message, static=False):
    if chat_id not in user_data:
        user_data[chat_id] = {"messages": [], "static_messages": [], "step": None}
    if static:
        user_data[chat_id]["static_messages"].append(message.message_id)
    else:
        user_data[chat_id]["messages"].append(message.message_id)

async def delete_all_messages(chat_id):
    if chat_id in user_data:
        for msg_id in user_data[chat_id].get("messages", []):
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        user_data[chat_id]["messages"] = []

# --- –ú–µ–Ω—é ---
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è","–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.add("–Ø–∫—ñ –∫–∞–Ω–∞–ª–∏ –≤—Ö–æ–¥—è—Ç—å –¥–æ TV ?")
    return markup

def get_main_menu_button_only():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    return markup

# --- –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def go_main_menu(message: types.Message):
    chat_id = message.chat.id
    await delete_all_messages(chat_id)
    user_data[chat_id] = {"messages": [], "step": None}
    msg = await message.answer("–ü–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=get_main_menu())
    await add_message(chat_id, msg)

# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = {"messages": [], "static_messages": [], "step": None}

    photo_url = "https://github.com/vdmkie/vodafone-bot/blob/main/%D0%B0%D0%BA%D1%86%D0%B8%D1%8F.png?raw=true"
    photo = await bot.send_photo(chat_id, photo_url)
    await add_message(chat_id, photo, static=True)

    msg = await message.answer(
        "üëã *–í—ñ—Ç–∞—é! –Ø –í–∞—à —á–∞—Ç-–±–æ—Ç –¢–∞—Ä–∞—Å*\n\n"
        "üí™ *–ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:*\n"
        "‚úÖ –ù–æ–≤–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞\n"
        "‚úÖ C—É—á–∞—Å–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è GPON\n"
        "‚úÖ –®–≤–∏–¥–∫—ñ—Å—Ç—å –¥–æ 1–ì—ñ–≥–∞–±—ñ—Ç/—Å–µ–∫\n"
        "‚úÖ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n"
        "‚úÖ –ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Å–≤—ñ—Ç–ª–∞\n"
        "‚úÖ –ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏\n\n"
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É –¥–æ 31.12.2026—Ä., –¥–∞–ª—ñ 250 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Start - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É –¥–æ 31.12.2026—Ä., –¥–∞–ª—ñ 300 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É –¥–æ 31.12.2026—Ä., –¥–∞–ª—ñ 325 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "üëâ *–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç + TV Max - 125–≥—Ä–Ω/–º—ñ—Å.*\n*–∞–∫—Ü—ñ–π–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—É –¥–æ 31.12.2026—Ä., –¥–∞–ª—ñ 375 –≥—Ä–Ω/–º—ñ—Å.*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    await add_message(chat_id, msg, static=True)
    await add_message(chat_id, message)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
@dp.message_handler(lambda m: m.text in ["–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", "–Ø–∫—ñ –∫–∞–Ω–∞–ª–∏ –≤—Ö–æ–¥—è—Ç—å –¥–æ TV ?", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"])
async def main_menu_handler(message: types.Message):
    chat_id = message.chat.id
    if message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await go_main_menu(message)
        return

    await add_message(chat_id, message)
    user_data[chat_id]["step"] = None

    if message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è":
        user_data[chat_id]["step"] = "ask_promo_code"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–¢–∞–∫", "–ù—ñ")
        markup.add("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        msg = await message.answer("–ß–∏ –º–∞—î—Ç–µ –í–∏ –ø—Ä–æ–º–æ-–∫–æ–¥?", reply_markup=markup)
        await add_message(chat_id, msg)
    elif message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é":
        user_data[chat_id]["step"] = "consult_name"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg)
    elif message.text == "–Ø–∫—ñ –∫–∞–Ω–∞–ª–∏ –≤—Ö–æ–¥—è—Ç—å –¥–æ TV ?":
        pdf_url = "https://github.com/vdmkie/vodafone-bot/blob/main/vf_tv.pdf?raw=true"
        msg = await bot.send_document(chat_id, pdf_url)
        await add_message(chat_id, msg)
        user_data[chat_id]["step"] = "tv_done"
        msg2 = await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é.", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg2)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ-–∫–æ–¥–∞ ---
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "ask_promo_code")
async def ask_promo_code_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await go_main_menu(message)
        return
    if text == "–¢–∞–∫":
        user_data[chat_id]["step"] = "waiting_for_promo_code"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥:", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg)
    elif text == "–ù—ñ":
        user_data[chat_id]["promo"] = False
        user_data[chat_id]["step"] = "waiting_for_name"
        msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–¢–∞–∫', '–ù—ñ' –∞–±–æ '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ-–∫–æ–¥–∞ ---
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_promo_code")
async def waiting_for_promo_code_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await go_main_menu(message)
        return
    if text.lower() == "vdmkie":
        user_data[chat_id]["promo"] = True
        user_data[chat_id]["step"] = "waiting_for_name"
        msg = await message.answer("‚úÖ –ü—Ä–æ–º–æ-–∫–æ–¥ –ø—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë:", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–º–æ-–∫–æ–¥. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ü–Ü–ë, –∞–¥—Ä–µ—Å–∞, —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–∞—Ä–∏—Ñ ---
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") in ["waiting_for_name", "waiting_for_address", "waiting_for_phone"])
async def order_handler(message: types.Message):
    chat_id = message.chat.id
    step = user_data[chat_id]["step"]
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await go_main_menu(message)
        return

    # --- –ü–Ü–ë ---
    if step == "waiting_for_name":
        if not is_valid_name(text):
            msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):", reply_markup=get_main_menu_button_only())
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["name"] = text
        user_data[chat_id]["step"] = "waiting_for_address"
        msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ!. –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg)

    # --- –ê–¥—Ä–µ—Å–∞ ---
    elif step == "waiting_for_address":
        if not is_valid_address(text):
            msg = await message.answer("‚ùó –ê–¥—Ä–µ—Å–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):", reply_markup=get_main_menu_button_only())
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["address"] = text
        user_data[chat_id]["step"] = "waiting_for_phone"
        msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX (–±–µ–∑ +):", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg)

    # --- –¢–µ–ª–µ—Ñ–æ–Ω ---
    elif step == "waiting_for_phone":
        if not is_valid_phone(text):
            msg = await message.answer("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:", reply_markup=get_main_menu_button_only())
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["phone"] = text
        promo = user_data[chat_id].get("promo", False)
        tariffs = PROMO_TARIFFS if promo else TARIFFS
        user_data[chat_id]["step"] = "waiting_for_tariff"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for t in tariffs.keys():
            markup.add(t)
        markup.add("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        summary = "–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:"
        msg = await message.answer(summary, reply_markup=markup)
        await add_message(chat_id, msg)

# --- –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ ---
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_tariff")
async def tariff_selection_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await go_main_menu(message)
        return

    promo = user_data[chat_id].get("promo", False)
    tariffs = PROMO_TARIFFS if promo else TARIFFS
    if text not in tariffs:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for t in tariffs.keys():
            markup.add(t)
        markup.add("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.", reply_markup=markup)
        await add_message(chat_id, msg)
        return

    user_data[chat_id]["selected_tariff"] = text
    user_data[chat_id]["step"] = "waiting_for_confirmation"

    summary = (
        f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω–Ω—ñ —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞—è–≤–∫—É:\n\n"
        f"üë§ –ü–Ü–ë: {user_data[chat_id]['name']}\n"
        f"üè† –ê–¥—Ä–µ—Å–∞: {user_data[chat_id]['address']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[chat_id]['phone']}\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {text}\n\n"
        "–Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'.\n"
        "–Ø–∫—â–æ –Ω—ñ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'."
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
    markup.add("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    msg = await message.answer(summary, reply_markup=markup)
    await add_message(chat_id, msg)

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ ---
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") == "waiting_for_confirmation")
async def confirmation_handler(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await go_main_menu(message)
        return
    elif text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        data = user_data[chat_id]
        promo = data.get("promo", False)
        tariffs_dict = PROMO_TARIFFS if promo else TARIFFS
        tariff_for_send = tariffs_dict.get(data["selected_tariff"], data["selected_tariff"])
        text_to_send = (
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:\n\n"
            f"üë§ –ü–Ü–ë: {data['name']}\n"
            f"üè† –ê–¥—Ä–µ—Å–∞: {data['address']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üì¶ –¢–∞—Ä–∏—Ñ: {tariff_for_send}\n\n"
            f"‚úèÔ∏è –∞–≤—Ç–æ—Ä –†–æ–≥–∞–ª—å–æ–≤ –í–∞–¥–∏–º"
        )
        await bot.send_message(CHAT_ID, text_to_send)
        await delete_all_messages(chat_id)
        user_data.pop(chat_id, None)
        msg = await message.answer("–î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞ ‚úÖ.\n–ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω:", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' –∞–±–æ '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg)

# --- –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ---
@dp.message_handler(lambda m: user_data.get(m.chat.id, {}).get("step") in ["consult_name", "consult_phone", "consult_confirm"])
async def consult_handler(message: types.Message):
    chat_id = message.chat.id
    step = user_data[chat_id]["step"]
    text = message.text.strip()
    await add_message(chat_id, message)

    if text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await go_main_menu(message)
        return

    if step == "consult_name":
        if not is_valid_name(text):
            msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ü–Ü–ë (3 —Å–ª–æ–≤–∞, –∫–æ–∂–Ω–µ –∑ –≤–µ–ª–∏–∫–æ—ó –ª—ñ—Ç–µ—Ä–∏):", reply_markup=get_main_menu_button_only())
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["name"] = text
        user_data[chat_id]["step"] = "consult_phone"
        msg = await message.answer("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ! –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:", reply_markup=get_main_menu_button_only())
        await add_message(chat_id, msg)

    elif step == "consult_phone":
        if not is_valid_phone(text):
            msg = await message.answer("‚ùó –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:", reply_markup=get_main_menu_button_only())
            await add_message(chat_id, msg)
            return
        user_data[chat_id]["phone"] = text
        user_data[chat_id]["step"] = "consult_confirm"
        summary = f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:\n\nüë§ –ü–Ü–ë: {user_data[chat_id]['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[chat_id]['phone']}"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
        markup.add("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
        msg = await message.answer(summary, reply_markup=markup)
        await add_message(chat_id, msg)

    elif step == "consult_confirm":
        if text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
            data = user_data[chat_id]
            text_to_send = f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é:\n\nüë§ –ü–Ü–ë: {data['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n‚úèÔ∏è –∞–≤—Ç–æ—Ä –†–æ–≥–∞–ª—å–æ–≤ –í–∞–¥–∏–º"
            await bot.send_message(CHAT_ID, text_to_send)
            await delete_all_messages(chat_id)
            user_data.pop(chat_id, None)
            msg = await message.answer("–î—è–∫—É—î–º–æ! –ù–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏ –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω ‚úÖ", reply_markup=get_main_menu())
            await add_message(chat_id, msg)
        else:
            msg = await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' –∞–±–æ '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é'.", reply_markup=get_main_menu_button_only())
            await add_message(chat_id, msg)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
