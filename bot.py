import os
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç - –≤–∞—Ä—ñ–∞–Ω—Ç ‚Ññ1\n(3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ)",

    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç - –≤–∞—Ä—ñ–∞–Ω—Ç ‚Ññ2\n(6 –º—ñ—Å—è—Ü—ñ–≤ –ø–æ 125 –≥—Ä–Ω, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (6 –º—ñ—Å—è—Ü—ñ–≤ –ø–æ 125 –≥—Ä–Ω)",

    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start\n(3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)",

    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro\n(3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)",

    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max\n(3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)":
        "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (3 –º—ñ—Å—è—Ü—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)"
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è
def is_valid_name(name):
    return bool(re.match(r"^[–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë]+\s[–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë]+\s[–ê-–Ø–Ü–á–Ñ“ê–∞-—è—ñ—ó—î“ë]+$", name.strip()))

def is_valid_address(address):
    return bool(re.search(r"[–∞-—è–ê-–Ø—ñ—ó–Ü–á–Ñ—î“ê“ë]+\s.+\d+", address.strip()))

def is_valid_phone(phone):
    return bool(re.match(r"^380\d{9}$", phone.strip()))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_data[message.chat.id] = {}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")

    await bot.send_photo(
        message.chat.id,
        "https://www.vodafone.ua/storage/editor/fotos/7f387e69a10a3da04355e7cf885e59c5_1741849417.jpg"
    )

    await message.answer(
        "üëã *–í—ñ—Ç–∞—î–º–æ —É Vodafone üá∫üá¶*\n\n"
        "üëª *–Ø –í–∞—à –±–æ—Ç –¢–∞—Ä–∞—Å*\n"
        "üí™  *–ü–µ—Ä–µ–≤–∞–≥–∏ –¥–æ–º–∞—à–Ω—å–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤—ñ–¥ Vodafone —Ü–µ...*\n"
        "‚úÖ *–ù–æ–≤–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞!*\n"
        "‚úÖ *C—É—á–∞—Å–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è GPON!*\n"
        "‚úÖ *–®–≤–∏–¥–∫—ñ—Å—Ç—å 1–ì—ñ–≥–∞–±—ñ—Ç/—Å–µ–∫.!*\n"
        "‚úÖ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ —Ç–∞ —à–≤–∏–¥–∫–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!*\n"
        "‚úÖ *–ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Å–≤—ñ—Ç–ª–∞!*\n"
        "‚úÖ *–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏!*\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É¬ª, —â–æ–± –ø–æ—á–∞—Ç–∏.",
        reply_markup=markup,
        parse_mode="Markdown"
    )

@dp.message_handler(lambda message: message.text == "–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É")
async def get_name(message: types.Message):
    user_data[message.chat.id] = {}
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –¢–∞—Ä–∞—Å–æ–≤ –¢–∞—Ä–∞—Å –¢–∞—Ä–∞—Å–æ–≤–∏—á):")

@dp.message_handler(lambda message: message.chat.id in user_data and 'name' not in user_data[message.chat.id])
async def get_address(message: types.Message):
    if not is_valid_name(message.text):
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    user_data[message.chat.id]['name'] = message.text.strip()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")

@dp.message_handler(lambda message: message.chat.id in user_data and 'address' not in user_data[message.chat.id])
async def get_phone(message: types.Message):
    if not is_valid_address(message.text):
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    user_data[message.chat.id]['address'] = message.text.strip()
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 380...):")

@dp.message_handler(lambda message: message.chat.id in user_data and 'phone' not in user_data[message.chat.id])
async def choose_tariff(message: types.Message):
    if not is_valid_phone(message.text):
        await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    user_data[message.chat.id]['phone'] = message.text.strip()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for tariff in TARIFFS:
        markup.add(tariff)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)

@dp.message_handler(lambda message: message.chat.id in user_data and 'tariff' not in user_data[message.chat.id])
async def finish(message: types.Message):
    if message.text not in TARIFFS:
        await message.answer("‚ùó –û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑—ñ —Å–ø–∏—Å–∫—É.")
        return

    user_data[message.chat.id]['tariff'] = message.text.strip()
    data = user_data[message.chat.id]

    text = (
        "üì© –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –†–æ–≥–∞–ª—å–æ–≤ –í–∞–¥–∏–º:\n\n"
        f"üë§ –ü–Ü–ë: {data['name']}\n"
        f"üè† –ê–¥—Ä–µ—Å–∞: {data['address']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {TARIFFS[data['tariff']]}"
    )

    await bot.send_message(CHAT_ID, text)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–≤–µ—Ä—à–∏—Ç–∏", "–ó–∞–º–æ–≤–∏—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫")

    await message.answer("‚úÖ –ó–∞—è–≤–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=markup)

# –ó–∞–≤–µ—Ä—à–∏—Ç–∏ = –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é
@dp.message_handler(lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏")
async def done(message: types.Message):
    if message.chat.id in user_data:
        del user_data[message.chat.id]
    await message.answer("üßπ –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∂–µ –æ–±—Ä–æ–±–ª—è—î –∑–∞—è–≤–∫—É üëã", reply_markup=types.ReplyKeyboardRemove())

# –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫
@dp.message_handler(lambda message: message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫")
async def callback_request(message: types.Message):
    data = user_data.get(message.chat.id)
    if not data:
        await message.answer("‚ùó –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É /start.")
        return

    text = (
        "üìû –ö–ª—ñ—î–Ω—Ç –ø—Ä–æ—Å–∏—Ç—å –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫:\n\n"
        f"üë§ –ü–Ü–ë: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
    )

    await bot.send_message(CHAT_ID, text)
    await message.answer("üîî –ó–∞–ø–∏—Ç –Ω–∞ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
