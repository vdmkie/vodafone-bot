import os
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 125–≥—Ä–Ω/–º—ñ—Å.\n(–∞–∫—Ü—ñ—è –¥–æ 31.12.2026—Ä., –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (125–≥—Ä–Ω/–º—ñ—Å. –¥–æ –∫—ñ–Ω—Ü—è 26 —Ä–æ–∫—É)"
}

PROMO_TARIFFS = {
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç -0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 250 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 300 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Start (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 325 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Pro (0–≥—Ä–Ω/6–º—ñ—Å.)",
    "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max - 0–≥—Ä–Ω/6–º—ñ—Å.\n(6 –º—ñ—Å—è—Ü—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ, –ø–æ—Ç—ñ–º 375 –≥—Ä–Ω/–º—ñ—Å.)": "–î–æ–º–∞—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç +TV Max (0–≥—Ä–Ω/6–º—ñ—Å.)"
}

CITIES_COVERAGE = {
    "–ö–∏—ó–≤": "https://www.google.com/maps/d/u/0/viewer?mid=1T0wyMmx7jf99vNKMX9qBkqxPnefPbnY&ll=50.45869537257287%2C30.529932392320312&z=11",
    "–î–Ω—ñ–ø—Ä–æ": "https://www.google.com/maps/d/u/0/viewer?mid=1JEKUJnE9XUTZPjd-f8jmXPcvLU4s-QhE&hl=uk&ll=48.47923374885031%2C34.92072785000002&z=15",
    "–õ—É—Ü—å–∫": "https://www.google.com/maps/d/u/0/viewer?mid=1drkIR5NswXCAazpv5qmaf02lL9OfJAc&ll=50.75093726790353%2C25.32392972563127&z=12",
    "–ö—Ä–∏–≤–∏–π –†—ñ–≥": "https://www.google.com/maps/d/u/0/viewer?mid=17kqq7EQadI5_o5bK1_lix-Qo2wbBaJY&ll=47.910800696984694%2C33.393370494687424&z=12",
    "–õ—å–≤—ñ–≤": "https://www.google.com/maps/d/u/0/viewer?mid=1CzE-aG4mdBTiu47Oj2u_lDDPDiNdwsAl&hl=uk&ll=49.78563613970314%2C24.064665899999994&z=17",
    "–ú–∏–∫–æ–ª–∞—ó–≤": "https://www.google.com/maps/d/u/0/viewer?mid=17YcaZFCt8EAnQ1oB8Dd-0xdOwLqWuMw&ll=46.97070266941583%2C31.969450300000013&z=13",
    "–û–¥–µ—Å–∞": "https://www.google.com/maps/d/u/0/viewer?mid=1WlFwsqR57hxtJvzWKHHpguYjw-Gvv6QU&ll=46.505228582262816%2C30.643495007229554&z=10",
    "–ü–æ–ª—Ç–∞–≤–∞": "https://www.google.com/maps/d/u/0/viewer?mid=1aGROaTa6OPOTsGvrzAbdiSPUvpZo1cA&ll=49.59354781387412%2C34.536843507594725&z=12",
    "–†—ñ–≤–Ω–µ": "https://www.google.com/maps/d/u/0/viewer?mid=1jqpYGCecy1zFXhfUz5zwTQr7aV4nXlU&ll=50.625776658980726%2C26.243116906868085&z=12",
    "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å": "https://www.google.com/maps/d/u/0/viewer?mid=1nM68n7nP6D1gRpVC3x2E-8wcq83QRDs&ll=49.560202454739375%2C25.59590906296999&z=12",
    "–•–∞—Ä–∫—ñ–≤": "https://www.google.com/maps/d/u/0/viewer?mid=19jXD4BddAs9_HAE4he7rWUUFKGEaNl3v&ll=49.95160510667597%2C36.370054685897266&z=14",
    "–ß–µ—Ä–Ω—ñ–≥—ñ–≤": "https://www.google.com/maps/d/u/0/viewer?mid=1SR9EvlXEcIk3EeIJeJDHAPqlRYyWTvM&ll=51.50050200415294%2C31.283996303050923&z=12",
    "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ": "https://www.google.com/maps/d/u/0/viewer?mid=1RrUzn_Ngks5VRHkYphXZm9TXxP3x3I&ll=48.29207824870348%2C25.93555815000003&z=13"
}

# ---------------- –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã ----------------
def is_valid_name(name):
    return bool(re.match(r"^[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+\s[–ê-–©–¨–Æ–Ø–Ü–á–Ñ“ê][–∞-—â—å—é—è—ñ—ó—î“ë]+$", name.strip()))

def is_valid_address(address):
    return len(address.strip()) >= 10

def is_valid_phone(phone):
    return bool(re.match(r"^380\d{9}$", phone.strip()))

# ---------------- –°–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–Ω—é ----------------
async def add_message(chat_id, message, static=False):
    if chat_id not in user_data:
        user_data[chat_id] = {"messages": [], "static_messages": [], "step": None, "data": {}}
    if static:
        user_data[chat_id]["static_messages"].append(message.message_id)
    else:
        user_data[chat_id]["messages"].append(message.message_id)

async def delete_all_messages(chat_id):
    if chat_id in user_data:
        for msg_id in user_data[chat_id].get("messages", []):
            try:
                await bot.delete_message(chat_id, msg_id)
            except:
                pass
        user_data[chat_id]["messages"] = []

def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
    markup.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
    markup.add("–Ø–∫—ñ –∫–∞–Ω–∞–ª–∏ –≤—Ö–æ–¥—è—Ç—å –¥–æ TV ?")
    return markup

# ---------------- –°—Ç–∞—Ä—Ç ----------------
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = {"messages": [], "static_messages": [], "step": None, "data": {}}
    photo_url = "https://github.com/vdmkie/vodafone-bot/blob/main/%D0%B0%D0%BA%D1%86%D0%B8%D1%8F.png?raw=true"
    photo = await bot.send_photo(chat_id, photo_url)
    await add_message(chat_id, photo, static=True)
    msg = await message.answer(
        "üëã *–í—ñ—Ç–∞—é! –Ø –í–∞—à —á–∞—Ç-–±–æ—Ç –¢–∞—Ä–∞—Å*\n\n"
        "üí™ *–ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:*\n"
        "‚úÖ *–ù–æ–≤–∞ —Ç–∞ —è–∫—ñ—Å–Ω–∞ –º–µ—Ä–µ–∂–∞!*\n"
        "‚úÖ *C—É—á–∞—Å–Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è GPON!*\n"
        "‚úÖ *–®–≤–∏–¥–∫—ñ—Å—Ç—å –¥–æ 1–ì—ñ–≥–∞–±—ñ—Ç/—Å–µ–∫.!*\n"
        "‚úÖ *–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è!*\n"
        "‚úÖ *–ü–æ–Ω–∞–¥ 72 –≥–æ–¥–∏–Ω–∏ –ø—Ä–∞—Ü—é—î –±–µ–∑ —Å–≤—ñ—Ç–ª–∞!*\n"
        "‚úÖ *–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏!*\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ üëá",
        reply_markup=get_main_menu(), parse_mode="Markdown"
    )
    await add_message(chat_id, msg, static=True)

# ---------------- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------------
@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
async def coverage(message: types.Message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for city in CITIES_COVERAGE.keys():
        markup.add(city)
    markup.add("–ù–∞–∑–∞–¥")
    msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ:", reply_markup=markup)
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: message.text in CITIES_COVERAGE)
async def city_coverage(message: types.Message):
    chat_id = message.chat.id
    url = CITIES_COVERAGE[message.text]
    msg = await message.answer(f"–ü–æ–∫—Ä–∏—Ç—Ç—è –¥–ª—è {message.text}: {url}", reply_markup=get_main_menu())
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: message.text == "–ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    chat_id = message.chat.id
    msg = await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
async def order_connection(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id]["step"] = "name"
    msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ *–ü–Ü–ë* (–ù–∞–ø—Ä. –Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á):", parse_mode="Markdown")
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: chat_id in user_data and user_data[message.chat.id]["step"] == "name")
async def get_name(message: types.Message):
    chat_id = message.chat.id
    if is_valid_name(message.text):
        user_data[chat_id]["data"]["name"] = message.text
        user_data[chat_id]["step"] = "address"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å *–∞–¥—Ä–µ—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è*:", parse_mode="Markdown")
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ü–Ü–ë. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await add_message(chat_id, msg)

@dp.message_handler(lambda message: chat_id in user_data and user_data[message.chat.id]["step"] == "address")
async def get_address(message: types.Message):
    chat_id = message.chat.id
    if is_valid_address(message.text):
        user_data[chat_id]["data"]["address"] = message.text
        user_data[chat_id]["step"] = "phone"
        msg = await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ 380XXXXXXXXX:")
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ê–¥—Ä–µ—Å–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await add_message(chat_id, msg)

@dp.message_handler(lambda message: chat_id in user_data and user_data[message.chat.id]["step"] == "phone")
async def get_phone(message: types.Message):
    chat_id = message.chat.id
    if is_valid_phone(message.text):
        user_data[chat_id]["data"]["phone"] = message.text
        # –ü–æ–∫–∞–∑ —Ç–∞—Ä–∏—Ñ—ñ–≤
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for t in TARIFFS.keys():
            markup.add(t)
        markup.add("–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏", "–ù–∞–∑–∞–¥")
        user_data[chat_id]["step"] = "tariff"
        msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)
        await add_message(chat_id, msg)
    else:
        msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await add_message(chat_id, msg)

@dp.message_handler(lambda message: chat_id in user_data and user_data[message.chat.id]["step"] == "tariff")
async def get_tariff(message: types.Message):
    chat_id = message.chat.id
    if message.text == "–ê–∫—Ü—ñ–π–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for t in PROMO_TARIFFS.keys():
            markup.add(t)
        markup.add("–ù–∞–∑–∞–¥")
        user_data[chat_id]["step"] = "promo"
        msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å –∞–∫—Ü—ñ–π–Ω–∏–π —Ç–∞—Ä–∏—Ñ:", reply_markup=markup)
        await add_message(chat_id, msg)
    elif message.text in TARIFFS:
        user_data[chat_id]["data"]["tariff"] = TARIFFS[message.text]
        user_data[chat_id]["step"] = "confirm"
        msg = await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {TARIFFS[message.text]}\n\n"
                                   f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É.",
                                   reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ù–∞–∑–∞–¥"))
        await add_message(chat_id, msg)
    elif message.text == "–ù–∞–∑–∞–¥":
        await back_to_main(message)
    else:
        msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.")
        await add_message(chat_id, msg)

@dp.message_handler(lambda message: chat_id in user_data and user_data[message.chat.id]["step"] == "promo")
async def get_promo(message: types.Message):
    chat_id = message.chat.id
    if message.text in PROMO_TARIFFS:
        user_data[chat_id]["data"]["tariff"] = PROMO_TARIFFS[message.text]
        user_data[chat_id]["step"] = "confirm"
        msg = await message.answer(f"‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –∞–∫—Ü—ñ–π–Ω–∏–π —Ç–∞—Ä–∏—Ñ: {PROMO_TARIFFS[message.text]}\n\n"
                                   f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—è–≤–∫—É.",
                                   reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "–ù–∞–∑–∞–¥"))
        await add_message(chat_id, msg)
    elif message.text == "–ù–∞–∑–∞–¥":
        await order_connection(message)
    else:
        msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ.")
        await add_message(chat_id, msg)

@dp.message_handler(lambda message: message.text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏")
async def confirm_order(message: types.Message):
    chat_id = message.chat.id
    data = user_data[chat_id]["data"]
    info = (
        f"‚úÖ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ {data['name']}!\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {data['address']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üíª –¢–∞—Ä–∏—Ñ: {data['tariff']}"
    )
    await bot.send_message(CHAT_ID, info)
    msg = await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞! –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.", reply_markup=get_main_menu())
    await add_message(chat_id, msg)
    user_data[chat_id]["step"] = None
    user_data[chat_id]["data"] = {}

@dp.message_handler(lambda message: message.text == "–Ø–∫—ñ –∫–∞–Ω–∞–ª–∏ –≤—Ö–æ–¥—è—Ç—å –¥–æ TV ?")
async def tv_channels(message: types.Message):
    chat_id = message.chat.id
    msg = await message.answer_document("https://github.com/vdmkie/vodafone-bot/raw/main/tv_channels.pdf",
                                       caption="üì∫ –ö–∞–Ω–∞–ª–∏, —â–æ –≤—Ö–æ–¥—è—Ç—å –¥–æ TV –ø–∞–∫–µ—Ç—É.")
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: message.text == "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é")
async def consultation(message: types.Message):
    chat_id = message.chat.id
    msg = await message.answer("üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n"
                               "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (380XXXXXXXXX):")
    user_data[chat_id]["step"] = "consult_phone"
    await add_message(chat_id, msg)

@dp.message_handler(lambda message: chat_id in user_data and user_data[message.chat.id]["step"] == "consult_phone")
async def get_consult_phone(message: types.Message):
    chat_id = message.chat.id
    if is_valid_phone(message.text):
        await bot.send_message(CHAT_ID, f"üìû –ó–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –≤—ñ–¥ {message.text}")
        msg = await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_menu())
        await add_message(chat_id, msg)
        user_data[chat_id]["step"] = None
    else:
        msg = await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await add_message(chat_id, msg)

# ---------------- –ó–∞–ø—É—Å–∫ ----------------
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
